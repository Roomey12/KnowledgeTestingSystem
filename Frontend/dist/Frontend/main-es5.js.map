{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/account/account.component.ts","webpack:///src/app/account/account.component.html","webpack:///src/app/admin-panel/admin-panel.component.ts","webpack:///src/app/admin-panel/admin-panel.component.html","webpack:///src/app/admin-panel/test/test-create/test-create.component.ts","webpack:///src/app/admin-panel/test/test-create/test-create.component.html","webpack:///src/app/admin-panel/test/test-edit/test-edit.component.ts","webpack:///src/app/admin-panel/test/test-edit/test-edit.component.html","webpack:///src/app/admin-panel/test/test-form/test-form.component.ts","webpack:///src/app/admin-panel/test/test-form/test-form.component.html","webpack:///src/app/admin-panel/test/test-list/test-list.component.ts","webpack:///src/app/admin-panel/test/test-list/test-list.component.html","webpack:///src/app/admin-panel/user-test/user-test-create/user-test-create.component.ts","webpack:///src/app/admin-panel/user-test/user-test-create/user-test-create.component.html","webpack:///src/app/admin-panel/user-test/user-test-edit/user-test-edit.component.ts","webpack:///src/app/admin-panel/user-test/user-test-edit/user-test-edit.component.html","webpack:///src/app/admin-panel/user-test/user-test-form-mt/user-test-form-mt.component.ts","webpack:///src/app/admin-panel/user-test/user-test-form-mt/user-test-form-mt.component.html","webpack:///src/app/admin-panel/user-test/user-test-form-ut/user-test-form-ut.component.ts","webpack:///src/app/admin-panel/user-test/user-test-form-ut/user-test-form-ut.component.html","webpack:///src/app/admin-panel/user-test/user-test-list/user-test-list.component.ts","webpack:///src/app/admin-panel/user-test/user-test-list/user-test-list.component.html","webpack:///src/app/admin-panel/user/user-edit/user-edit.component.ts","webpack:///src/app/admin-panel/user/user-edit/user-edit.component.html","webpack:///src/app/admin-panel/user/user-form/user-form.component.ts","webpack:///src/app/admin-panel/user/user-form/user-form.component.html","webpack:///src/app/admin-panel/user/user-list/user-list.component.ts","webpack:///src/app/admin-panel/user/user-list/user-list.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.interceptor.ts","webpack:///src/app/forbidden/forbidden.component.ts","webpack:///src/app/forbidden/forbidden.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/models/answer.ts","webpack:///src/app/models/question.ts","webpack:///src/app/models/test.ts","webpack:///src/app/models/testResult.ts","webpack:///src/app/services/account.service.ts","webpack:///src/app/services/answer.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/question.service.ts","webpack:///src/app/services/test.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/services/usertest.service.ts","webpack:///src/app/test-info/test-info.component.ts","webpack:///src/app/test-info/test-info.component.html","webpack:///src/app/test-start/exit.test-start.guard.ts","webpack:///src/app/test-start/test-start.component.ts","webpack:///src/app/test-start/test-start.component.html","webpack:///src/app/user/confirm-email/confirm-email.component.ts","webpack:///src/app/user/confirm-email/confirm-email.component.html","webpack:///src/app/user/external-login/external-login.component.ts","webpack:///src/app/user/external-login/external-login.component.html","webpack:///src/app/user/forgot-password/forgot-password.component.ts","webpack:///src/app/user/forgot-password/forgot-password.component.html","webpack:///src/app/user/login/login.component.ts","webpack:///src/app/user/login/login.component.html","webpack:///src/app/user/registration/registration.component.ts","webpack:///src/app/user/registration/registration.component.html","webpack:///src/app/user/reset-password/reset-password.component.ts","webpack:///src/app/user/reset-password/reset-password.component.html","webpack:///src/app/user/user.component.ts","webpack:///src/app/user/user.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AccountComponent","userTestService","accountService","toastr","userService","activeRoute","pas1","pas2","pas3","userId","snapshot","params","usernameModel","reset","passwordModel","loadUserProfile","loadStrangeUserProfile","getUserProfile","subscribe","res","userDetails","loadUserTests","err","console","log","getUserTestsByUserId","data","userTests","newEmailModel","changePassword","succeeded","success","errors","forEach","element","error","description","changeEmail","changeUsername","username","profileImageUrl","document","getElementById","value","img","createElement","src","onerror","onload","changeProfileImage","email","aboutMe","length","changeAboutMe","el","input","eye","getAttribute","classList","add","setAttribute","remove","getUser","show_hide_password","selector","templateUrl","styleUrls","AdminPanelComponent","router","loadUsers","getUsers","users","styles","TestCreateComponent","fb","testService","questionService","answerService","questions","hideQuestions","questionModel","group","Content","required","AnswersCount","answerCountRangeValidator","answerModel","Mark","markRangeValidator","test","testTime","Date","Time","maxTime","split","setMinutes","setSeconds","setMilliseconds","maxScore","Number","i","push","testCreated","sas","Map","q","t","a","cad","isSin","checked","quest","content","answerDescription","isSingle","help","j","set","questionsCreated","createTest","fillQuest","pipe","item","question","IsSingle","AnswerDescription","answers","isCorrect","mark","answer","IsCorrect","createQuestionForNewTest","createAnswerForNewQuestion","navigateByUrl","end","control","undefined","isNaN","TestEditComponent","testId","testModel","loadTest","withQA","getTestById","loadTestInfoGet","testInfoGet","getTestStart","loaded","fillQuestions","testInfo","getQuestionById","data1","fillTestInfo","toString","questionId","deleteQuestion","answerId","deleteAnswer","showAddQuestion","isMultiple","answersCount","newQuestion","showFillQuestion","TestId","createQuestionForOldTest","title","putTest","QuestionId","editQuestion","getAnswersByQuestionId","AnswerId","editAnswer","questIdForNewAns","createAnswerForOldQuestion","TestFormComponent","TestListComponent","pageNumber","loadTests","getTestsForPagination","tests","previousTests","result","confirm","deleteTest","previousPage","nextPage","UserTestCreateComponent","userTestModel","userTest","testResult","time","userTestTime","testTitle","Username","TestTitle","postTestResultByAdmin","create","UserTestEditComponent","loadUserTest","userTestMark","UserTestId","userTestId","UserId","putUserTest","getUserTestById","UserTestFormMTComponent","UserTestFormUTComponent","UserTestListComponent","getUserTestsForPagination","previousUserTests","deleteUserTest","UserEditComponent","user","ProfileImageUrl","saveUser","Email","UserName","AboutMe","putUser","emailModel","Role","changeUserRole","UserFormComponent","UserListComponent","getUsersForPagination","previousUsers","deleteUser","routes","path","redirectTo","pathMatch","component","children","canActivate","permittedRoles","canDeactivate","AppRoutingModule","forRoot","imports","AppComponent","spinner","show","setTimeout","hide","localStorage","removeItem","navigate","onLogout","AppModule","provide","useClass","multi","progressBar","declarations","schemas","providers","bootstrap","AuthGuard","authService","next","state","getItem","roles","roleMatch","providedIn","AuthInterceptor","clonedReq","clone","headers","handle","succ","status","ForbiddenComponent","HomeComponent","getTopUserTests","getTestsByTitle","loadTestsByTitle","Answer","Question","Test","TestResult","AccountService","http","accountUrl","apiUrl","Passwords","OldPassword","Password","minLength","ConfirmPassword","validator","comparePasswords","NewUsername","UserEmail","confirmPswrdCtrl","get","setErrors","passwordMismatch","body","NewPassword","put","oldUsername","OldUsername","oldEmail","OldEmail","NewEmail","post","AnswerService","answerUrl","AuthService","authUrl","formModel","passwordsModel","options","append","formData","allowedRoles","isMatch","payLoad","JSON","parse","window","atob","userRole","role","token","stringify","Token","location","href","QuestionService","questionUrl","TestService","testUrl","Title","Description","QuestionsCount","questionCountRangeValidator","pattern","UserService","userUrl","UserTestService","userTestUrl","count","TestInfoComponent","parseInt","getTest","ExitTestStartGuard","TestStartComponent","sum","submitted","fillLocalstorageTime","endTest1","observables","endTest2","alert","timer","d1","d2","y","getMinutes","getSeconds","countDownDate","getTime","startDate","passed","interval","setInterval","now","remaining","localstorageTimeSet","localstorageTime","minutes","Math","floor","seconds","innerHTML","timeLeft","event","setItem","clearInterval","min","sec","rizn","answers1","getElementsByName","all","getAnswerById","fillTestResult","endTest3","reduce","ans","includes","postTestResult","timeResult","toFixed","message","ConfirmEmailComponent","activatedRoute","queryParams","newEmail","forNewEmail","confirmNewEmail","confirmEmail","emailConfirmed","newEmailConfirmed","ExternalLoginComponent","ForgotPasswordComponent","forgotPassword","onSubmit","LoginComponent","form","login","jwtToken","googleLogin","facebookLogin","RegistrationComponent","register","ResetPasswordComponent","resetPassword","UserComponent","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UserTestService } from '../services/usertest.service';\nimport { UserService } from '../services/user.service';\nimport { ChangePassword } from '../models/changePassword';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from '../services/account.service';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n\n})\nexport class AccountComponent implements OnInit {\n\n  userId: string;\n  userDetails;\n  userTests;\n  password: ChangePassword;\n  pas1: string = \"oldpass\";\n  pas2: string = \"newpass\";\n  pas3: string = \"confpass\";\n\n  constructor(private userTestService: UserTestService, public accountService: AccountService, \n              private toastr: ToastrService, private userService: UserService, activeRoute: ActivatedRoute) {\n    this.userId = activeRoute.snapshot.params[\"id\"];\n  }\n\n  ngOnInit() {\n    if(!this.userId){\n      this.accountService.usernameModel.reset();\n      this.accountService.passwordModel.reset();\n      this.loadUserProfile();\n    }\n    else{\n      this.loadStrangeUserProfile();\n    }\n  }\n\n  loadUserProfile(){\n    this.accountService.getUserProfile().subscribe(\n      res => {\n        this.userDetails = res;\n        this.loadUserTests();\n      },\n      err => {\n        console.log(err);\n      },\n    );\n  }\n  \n  loadUserTests(){\n    this.userTestService.getUserTestsByUserId(this.userDetails[\"id\"])\n      .subscribe((data: object[]) =>{\n         this.userTests = data;\n      })\n  }\n\n  showChangePassword(){\n    this.accountService.passwordModel.reset(); \n  }\n\n  showChangeUsername(){\n    this.accountService.usernameModel.reset();\n  }\n\n  showChangeEmail(){\n    this.accountService.newEmailModel.reset();\n  }\n  \n  changePassword(){\n    this.accountService.changePassword(this.userDetails[\"id\"]).subscribe(\n      (res: any) => {\n        console.log(res);\n        if (res.succeeded) {\n          this.accountService.passwordModel.reset();\n          this.toastr.success('Пароль был изменен.', 'Успешно.');\n        } \n        else{\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case 'PasswordMismatch':\n                this.toastr.error('Старый пароль введен неверно.','Пароль не был изменен.');\n                break;\n\n              default:\n              this.toastr.error(element.description,'Пароль не был изменен.');\n                break;\n            }\n          });\n        }\n      },\n      err => {\n        if (err.error == \"Old and new password are same\"){\n          this.toastr.error('Старый и новый пароли совпадают.', 'Пароль не был изменен.');\n        }\n        console.log(err);\n      }\n    );\n  }\n\n  changeEmail(){\n    this.accountService.changeEmail(this.userDetails[\"email\"]).subscribe(\n      data => {\n        this.accountService.newEmailModel.reset();\n        this.toastr.success('Для продолжения, перейдите по ссылке, которая была отправлена на указаную почту.', 'Успешно.');\n      },\n      err => {\n        if(err.error == \"User with this email already exists\"){\n          this.toastr.error(\"Данная почта уже занята.\",\"Безуспешно.\")\n        }\n      }\n    )\n  }\n\n  changeUsername(){\n    this.accountService.changeUsername(this.userDetails.username).subscribe(\n      data => {\n        this.loadUserProfile();\n        this.accountService.usernameModel.reset();\n        this.toastr.success('Имя пользователя было изменено.', 'Успешно.');\n      },\n      err => {\n        if (err.error == \"User with this username already exists\"){\n          this.toastr.error('Пользователь с таким именем уже существует.', 'Имя пользователя не было изменено.');\n        }\n        else if(err.error == \"Username can not be the same as current\"){\n          this.toastr.error('Новое имя пользователя не должно совпадать с текущим.', 'Имя пользователя не было изменено.');\n        }\n        console.log(err);\n      }\n    );\n  }\n\n  changeProfileImage(){\n    var profileImageUrl = (document.getElementById(\"profileImageUrl\") as HTMLInputElement).value;\n    var img = document.createElement(\"img\");\n    img.src = profileImageUrl;\n    img.onerror = () => {\n      this.toastr.error(\"Ссылка на картинку недействительна.\", \"Безуспешно.\");\n    }\n    img.onload = () => {\n      this.accountService.changeProfileImage(this.userDetails.email, profileImageUrl).subscribe(\n        data => {\n          this.loadUserProfile();\n          (document.getElementById(\"profileImageUrl\") as HTMLInputElement).value = \"\";\n          this.toastr.success('Аватар был изменен', 'Успешно.');\n        },\n        err => {\n          this.toastr.error('Что-то пошло не так.','Безуспешно.');\n        }\n      );\n    }\n  }\n\n  changeAboutMe(){\n    let aboutMe = (document.getElementById(\"aboutMe\") as HTMLInputElement).value;\n    if(aboutMe.length > 50){\n      this.toastr.error('Максимальная длина информации 50 символов.','Безуспешно.');\n    }\n    else{\n      this.accountService.changeAboutMe(this.userDetails.email, aboutMe).subscribe(\n        data => {\n          this.loadUserProfile();\n          (document.getElementById(\"aboutMe\") as HTMLInputElement).value = \"\";\n          this.toastr.success('Информация `О себе была` изменена.', 'Успешно.');\n        },\n        err => {\n          this.toastr.error('Что-то пошло не так.','Безуспешно.');\n        }\n      );\n    }\n  }\n\n  show_hide_password(el){\n    if(el == \"oldpass\"){\n      var input = document.getElementById('old-password');\n      var eye = document.getElementById('old-passeye');\n    }\n    else if(el == \"newpass\"){\n      var input = document.getElementById('new-password');\n      var eye = document.getElementById('new-passeye');\n    }\n    else{\n      var input = document.getElementById('conf-password');\n      var eye = document.getElementById('conf-passeye');\n    }\n    if (input.getAttribute('type') == 'password') {\n      eye.classList.add('view');\n      input.setAttribute('type', 'text');\n    } else {\n      eye.classList.remove('view');\n      input.setAttribute('type', 'password');\n    }\n    return false;\n  }\n\n  loadStrangeUserProfile(){\n    this.userService.getUser(this.userId).subscribe(\n      data => {\n        this.userDetails = data;\n        this.loadUserTests();\n      }\n    )\n  }\n}\n"," <div class=\"container\">\n    <h2 style=\"text-align: center; margin: 10px;\">Личный кабинет</h2>\n    <div class=\"row  d-flex justify-content-center\">\n        <div class=\"col-6\" *ngIf=\"userDetails\">\n            <div class=\"d-flex justify-content-center align-items-center\" style=\"border: 3px solid grey; border-radius: 10px;\">\n                <div class=\"col-4\">\n                    <img src=\"{{userDetails.profileImageUrl}}\" class=\"img-thumbnail\">\n                </div>\n                <div class=\"card-body col-6\">\n                    <ul class=\"list-group\">\n                        <li class=\"list-group-item\"><strong>Имя пользователя: </strong>{{userDetails.username}}</li>\n                        <li class=\"list-group-item\" *ngIf=\"!userId\"><strong>Почта: </strong>{{userDetails.email}}</li>\n                        <li class=\"list-group-item\"><strong>О себе:</strong><p style=\"word-break: break-all\">{{userDetails.aboutMe}}</p></li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <div class=\"col-12 d-flex justify-content-center\" *ngIf=\"!userId\">\n            <button class=\"btn btn-info place m-3\" (click)=\"showChangePassword()\" data-toggle=\"modal\" data-target=\"#modalchangepass\">Изменить пароль</button>\n            <button class=\"btn btn-info place m-3\" (click)=\"showChangeEmail()\" data-toggle=\"modal\" data-target=\"#modachangeemail\">Изменить Email</button>\n            <button class=\"btn btn-info place m-3\" (click)=\"showChangeUsername()\" data-toggle=\"modal\" data-target=\"#modachangename\">Изменить имя пользователя</button>\n            <button class=\"btn btn-info place m-3\" data-toggle=\"modal\" data-target=\"#modachangeprofileimage\">Изменить аватар</button>\n            <button class=\"btn btn-info place m-3\" data-toggle=\"modal\" data-target=\"#modachangeaboutme\">Изменить 'О себе'</button>\n        </div>\n        <div class=\"col-12\">\n            <h3 style=\"text-align: center;\">Пройденные тесты</h3>\n            <table class=\"table mtable m-3\" style=\"height: auto;\">\n                <thead>\n                    <tr>\n                        <td>Тест</td>\n                        <td>Результат</td>\n                        <td>Время</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let u of userTests\">\n                        <td>{{u?.test}}</td>\n                        <td>{{u?.mark}}%</td>\n                        <td>{{u?.time.substring(14)}}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n    \n    <div class=\"modal fade\" id=\"modachangeemail\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Изменение электронной почты</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <form [formGroup]=\"accountService.newEmailModel\" autocomplete=\"off\" (submit)=\"changeEmail()\">\n                    <div class=\"form-group required\">\n                        <label>Новый Email</label>\n                        <input class=\"form-control\" formControlName=\"UserEmail\">\n                        <label class=\"text-danger\" *ngIf=\"accountService.newEmailModel.get('UserEmail').touched && accountService.newEmailModel.get('UserEmail').errors?.required\">\n                          Это поле обязательно.\n                        </label>\n                        <label class=\"text-danger\" *ngIf=\"accountService.newEmailModel.get('UserEmail').touched && accountService.newEmailModel.get('UserEmail').errors?.email\">\n                            Почта введена неверно.\n                        </label>\n                    </div>\n                    <div class=\"form-row  text-center\">\n                        <div class=\"form-group col-12\">\n                          <button type=\"submit\" class=\"btn btn-lg btn-success\" [disabled]=\"!accountService.newEmailModel.valid\">Изменить</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n          </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" id=\"modachangename\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"  aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Изменение имени пользователя</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <form [formGroup]=\"accountService.usernameModel\" autocomplete=\"off\" (submit)=\"changeUsername()\">\n                    <div class=\"form-group required\">\n                        <label>Новое имя пользователя</label>\n                        <input class=\"form-control\" formControlName=\"NewUsername\">\n                        <label class=\"text-danger\" *ngIf=\"accountService.usernameModel.get('NewUsername').touched && accountService.usernameModel.get('NewUsername').errors?.required\">\n                          Это поле обязательно.\n                        </label>\n                    </div>\n                    <div class=\"form-row text-center\">\n                        <div class=\"form-group col-12\">\n                          <button type=\"submit\" class=\"btn btn-lg btn-success\" [disabled]=\"!accountService.usernameModel.valid\">Изменить</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n          </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" id=\"modachangeprofileimage\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Изменение аватара</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"form-group required\">\n                    <label>Ссылка на новый аватар</label>\n                    <input class=\"form-control\" id=\"profileImageUrl\">\n                </div>\n                <div class=\"form-row text-center\">\n                    <div class=\"form-group col-12\">\n                      <button type=\"submit\" class=\"btn btn-lg btn-success\" (click)=\"changeProfileImage()\">Изменить</button>\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" id=\"modachangeaboutme\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Изменение 'О себе'</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"form-group required\">\n                    <label>О себе</label>\n                    <input class=\"form-control\" id=\"aboutMe\">\n                </div>\n                <div class=\"form-row text-center\">\n                    <div class=\"form-group col-12\">\n                      <button type=\"submit\" class=\"btn btn-lg btn-success\" (click)=\"changeAboutMe()\">Изменить</button>\n                    </div>\n                </div>\n            </div>\n          </div>\n        </div>\n    </div>\n\n    <div class=\"modal fade\" id=\"modalchangepass\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h5 class=\"modal-title\" id=\"exampleModalLabel\">Изменение пароля</h5>\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                    <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div class=\"modal-body\">\n                <form [formGroup]=\"accountService.passwordModel\" autocomplete=\"off\" (submit)=\"changePassword()\">\n                    <div formGroupName=\"Passwords\">\n                        <div class=\"form-group required\">\n                            <label>Старый пароль</label><br>\n                            <div class=\"password\">\n                                <input type=\"password\" id=\"old-password\" class=\"form-control\" formControlName=\"OldPassword\">\n                                <a href=\"#\" id=\"old-passeye\" class=\"password-control\" (click)=\"show_hide_password(pas1)\"></a>\n                            </div>\n                            <label class=\"text-danger\" *ngIf=\"accountService.passwordModel.get('Passwords.OldPassword').touched && accountService.passwordModel.get('Passwords.OldPassword').errors?.required\">\n                              Это поле обязательно.\n                            </label>\n                        </div>\n                        <div class=\"form-group required\">\n                            <label>Новый пароль</label><br>\n                            <div class=\"password\">\n                                <input type=\"password\" id=\"new-password\" class=\"form-control\" formControlName=\"Password\">\n                                <a href=\"#\" id=\"new-passeye\" class=\"password-control\" (click)=\"show_hide_password(pas2)\"></a>\n                            </div>                    \n                            <label class=\"text-danger\" *ngIf=\"accountService.passwordModel.get('Passwords.Password').touched && accountService.passwordModel.get('Passwords.Password').errors?.required\">\n                                Это поле обязательно.\n                            </label>\n                            <label class=\"text-danger\" *ngIf=\"accountService.passwordModel.get('Passwords.Password').touched && accountService.passwordModel.get('Passwords.Password').errors?.minlength\">\n                                Пароль должен состоять минимум из 6 символов.\n                            </label>\n                        </div>\n                        <div class=\"form-group required\">\n                            <label>Подтвердите пароль</label><br>\n                            <div class=\"password\">\n                                <input type=\"password\" id=\"conf-password\" class=\"form-control\" formControlName=\"ConfirmPassword\">\n                                <a href=\"#\" id=\"conf-passeye\" class=\"password-control\" (click)=\"show_hide_password(pas3)\"></a>\n                            </div>\n                            <label class=\"text-danger\" *ngIf=\"accountService.passwordModel.get('Passwords.ConfirmPassword').touched && accountService.passwordModel.get('Passwords.ConfirmPassword').errors?.required\">\n                              Это поле обязательно.\n                            </label>\n                            <label class=\"text-danger\" *ngIf=\"accountService.passwordModel.get('Passwords.ConfirmPassword').touched && accountService.passwordModel.get('Passwords.ConfirmPassword').errors?.passwordMismatch\">\n                              Пароли не совпадают.\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"form-row text-center\">\n                        <div class=\"form-group col-12\">\n                          <button type=\"submit\" class=\"btn btn-lg btn-success\" [disabled]=\"!accountService.passwordModel.valid\">Изменить</button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n          </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\nimport { User } from '../models/user';\n\n\n@Component({\n  selector: 'app-admin-panel',\n  templateUrl: './admin-panel.component.html',\n  styles: [] \n})\nexport class AdminPanelComponent implements OnInit {\n\n  users: User[];\n  constructor(private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  loadUsers(){\n    this.userService.getUsers()\n        .subscribe((data: User[]) => {\n          this.users = data;\n        });\n  }\n}\n","<div class=\"text-center\">\n    <button class=\"btn btn-info m-3\" routerLink='/admin-panel/user-list' routerLinkActive='active'>Пользователи</button>\n    <button class=\"btn btn-info m-3\" routerLink='/admin-panel/test-list' routerLinkActive='active'>Тесты</button>\n    <button class=\"btn btn-info m-3\" routerLink='/admin-panel/user-test-list' routerLinkActive='active'>Результаты</button>\n</div>\n<router-outlet></router-outlet>\n\n","import { Component, OnInit } from '@angular/core';\nimport { Test } from 'src/app/models/test';\nimport { TestService } from 'src/app/services/test.service';\nimport { Route } from '@angular/compiler/src/core';\nimport { Router } from '@angular/router';\nimport { Question } from 'src/app/models/question';\nimport { Answer } from 'src/app/models/answer';\nimport { QuestionService } from 'src/app/services/question.service';\nimport { AnswerService } from 'src/app/services/answer.service';\nimport { forkJoin, of, from } from 'rxjs';\nimport { mergeMap, map, mergeAll, concatMap, tap, finalize } from 'rxjs/operators';\nimport { TestFormComponent } from '../test-form/test-form.component';\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-test-create',\n  templateUrl: './test-create.component.html',\n  styleUrls: []\n})\nexport class TestCreateComponent implements OnInit {\n\n  test;\n  questions = [];\n  hideQuestions: boolean = true;\n  testCreated: boolean;\n  questionsCreated: boolean;\n  end: boolean;\n  sas: Map<object, number[]>;\n\n  constructor(private fb: FormBuilder, public testService: TestService, public questionService: QuestionService,\n              public answerService: AnswerService, private toastr: ToastrService, private router: Router) { }\n\n  ngOnInit(): void { \n    this.test = new Test;\n  }\n\n  questionModel = this.fb.group({\n    Content: ['', Validators.required],\n    AnswersCount: ['', [this.answerCountRangeValidator, Validators.required]]\n  });\n\n  answerModel = this.fb.group({\n    Content: ['', Validators.required],\n    Mark: ['', [this.markRangeValidator, Validators.required]]\n  });\n\n  create(){\n    let testTime = new Date();\n    let Time = this.test.maxTime.split(\":\");\n    testTime.setMinutes(Time[0]);\n    testTime.setSeconds(Time[1]);\n    testTime.setMilliseconds(0);\n    this.test.maxTime = testTime;\n    this.test.maxScore = Number(this.test.maxScore);\n    for(let i = 0; i < this.test.maxScore; i++){\n      this.questions.push(i);\n    }\n    this.testCreated = true;\n  }\n\n  next(){\n    this.sas = new Map<object, number[]>();\n    for(let i = 0; i < this.questions.length; i++){\n      let q = document.getElementById(`q_${i+1}`) as HTMLInputElement;\n      let t = document.getElementById(`t_${i+1}`) as HTMLInputElement;\n      let a = document.getElementById(`a_${i+1}`) as HTMLInputElement;\n      let cad = document.getElementById(`cad_${i+1}`) as HTMLInputElement;\n      let isSin = true;\n      if(t.checked){\n        isSin = false;\n      }\n      let quest = {\n        content: q.value,\n        answerDescription: cad.value == null ? null : cad.value,\n        isSingle: isSin\n      };\n      let help = [];\n      for(let j = 0; j < Number(a.value); j++){\n        help.push(j);\n      }\n      this.sas.set(quest, help);\n    }\n    this.questionsCreated = true;\n    this.hideQuestions = false;\n  }\n\n  onSubmit(){\n    this.test.maxScore = 0;\n    this.testService.createTest(this.test).subscribe(data => {\n          this.fillQuest();\n      });\n  }\n\n  fillQuest(){\n    let i = 0;\n    from(this.sas).pipe(\n      concatMap(item => {\n        // get question info\n        let q = document.getElementById(`q_${i+1}`) as HTMLInputElement;\n        let t = document.getElementById(`t_${i+1}`) as HTMLInputElement;\n        let cad = document.getElementById(`cad_${i+1}`) as HTMLInputElement;\n        let isSin = true;\n        if(t.checked){\n            isSin = false;\n        }\n        let question = new Question();\n        question.Content = q.value;\n        question.IsSingle = isSin;\n        question.AnswerDescription = cad.value;\n\n        // get answers for this question\n        let answers = [];\n        for(let j of item[1]){\n            let isCorrect = document.getElementById(`a_isCorrect_${i}:${j}`) as unknown as HTMLInputElement;\n            let content = document.getElementById(`a_content_${i}:${j}`) as unknown as HTMLInputElement;\n            let mark =  document.getElementById(`a_mark_${i}:${j}`) as unknown as HTMLInputElement;\n\n            let answer = new Answer();\n            answer.IsCorrect = isCorrect.checked;\n            answer.Content = content.value;\n            answer.Mark = Number(mark.value);\n            answers.push(answer);\n            j++;\n        }\n        i++;\n\n        //post question\n        return this.questionService.createQuestionForNewTest(question).pipe(\n            concatMap(data=> {\n                console.log(`question ${question.Content} done`);\n                return from(answers).pipe(\n                    concatMap(answer => this.answerService.createAnswerForNewQuestion(answer).pipe(\n                        tap(data => console.log(`answer ${answer} done` ) ),\n                    )),\n                    finalize(() => {\n                        console.log(\"done\");\n                    }),\n                );\n            }),\n        );\n    }),\n    finalize(() => {\n      this.router.navigateByUrl(\"/admin-panel\");\n      this.toastr.success(\"Тест был создан.\", \"Успешно.\");\n      this.end = true;\n    }),\n    ).subscribe();\n  }\n\n  answerCountRangeValidator(control: AbstractControl): { [key: string]: boolean } | null {\n    if (control.value !== undefined && (isNaN(control.value) || control.value < 0 || control.value > 50)) {\n        return { 'answerCountRange': true };\n    }\n    return null;\n  }\n\n  markRangeValidator(control: AbstractControl): { [key: string]: boolean } | null {\n    if (control.value !== undefined && (isNaN(control.value) || control.value < -100 || control.value > 100)) {\n        return { 'markRange': true };\n    }\n    return null;\n  }\n}","    <div class=\"container\">\n        <div class=\"row justify-content-center\" *ngIf=\"!testCreated\">\n            <div class=\"col-12 col-md-8 col-lg-6 pb-5\">\n                <h2 class=\"text-center\">Информация по тесту</h2>\n                <test-form [(test)]=\"test\"></test-form>\n                <div class=\"form-group text-center\">\n                    <input type=\"button\" value=\"Создать\" (click)=\"create()\" class=\"btn btn-success\" [disabled]=\"!testService.testModel.valid\"/>\n                </div>\n            </div>\n        </div> \n        <div *ngIf = \"testCreated\">\n            <div *ngFor = \"let i of questions\">\n                <form [formGroup]=\"questionModel\" class=\"mx-3\" autocomplete=\"off\">\n                    <span>{{i+1}}.</span>\n                    <span>Несколько правильных ответов?</span><input class=\"ml-2\" type=\"checkbox\" id=\"t_{{i+1}}\"/>\n                    <input type=\"text\" class=\"mx-3\" formControlName=\"Content\" id=\"q_{{i+1}}\" placeholder=\"Текст вопроса\">\n                    <label class=\"text-danger\" *ngIf=\"questionModel.get('Content').touched && questionModel.get('Content').errors?.required\">\n                        Это поле обязательно.\n                    </label>\n                    <input type=\"text\" class=\"mx-3\" id=\"cad_{{i+1}}\" placeholder=\"Объяснение ответа\">\n                    <input type=\"text\" formControlName=\"AnswersCount\" id=\"a_{{i+1}}\" placeholder=\"Количество ответов\">\n                    <label class=\"text-danger\" *ngIf=\"questionModel.get('AnswersCount').touched && questionModel.get('AnswersCount').errors?.answerCountRange\">\n                        Количество вопросов введено неверно.\n                    </label>\n                    <label class=\"text-danger\" *ngIf=\"questionModel.get('AnswersCount').touched && questionModel.get('AnswersCount').errors?.required\">\n                        Это поле обязательно.\n                    </label>\n                </form>\n                <br>\n            </div>\n            <div *ngIf=\"hideQuestions\">\n                <div class=\"form-group\">\n                    <input type=\"button\" value=\"Далее\" (click)=\"next()\" [disabled]=\"!questionModel.valid\" class=\"btn btn-success\"/>\n                </div>\n            </div>\n        </div>\n        <div *ngIf = \"questionsCreated\">\n            <div *ngFor=\"let item of sas | keyvalue; let i = index\">\n                <form name=\"form_{{i}}\" [formGroup]=\"answerModel\" autocomplete=\"off\">\n                    <p><b>{{i+1}}. {{item.key.content}}</b></p>\n                    <div *ngFor=\"let s of item.value; let j = index;\">\n                        <div class=\"col-12\">\n                            <div class=\"row\">\n                                <span>Правильный?</span>\n                                <div class=\"mx-1\">\n                                    <div *ngIf=\"item.key.isSingle; else isMultiple\">\n                                        <input type=\"radio\" id=\"a_isCorrect_{{i}}:{{j}}\" name=\"a_isCorrect_{{i}}\"/>\n                                    </div>\n                                    <ng-template #isMultiple>\n                                        <input type=\"checkbox\" id=\"a_isCorrect_{{i}}:{{j}}\" name=\"a_isCorrect_{{i}}\"/>\n                                    </ng-template>\n                                </div>\n                                <input type=\"text\" class=\"mx-2\" formControlName=\"Content\" placeholder=\"Контент\" id=\"a_content_{{i}}:{{j}}\" name=\"a_content\"/> \n                                <label class=\"text-danger\" *ngIf=\"answerModel.get('Content').touched && answerModel.get('Content').errors?.required\">\n                                    Это поле обязательно.\n                                </label>\n                                <input type=\"text\" class=\"mx-2\" formControlName=\"Mark\" placeholder=\"Бал\" id=\"a_mark_{{i}}:{{j}}\" name=\"a_mark\"/>\n                                <label class=\"text-danger\" *ngIf=\"answerModel.get('Mark').touched && answerModel.get('Mark').errors?.markRange\">\n                                    Количество вопросов введено неверно.\n                                </label>\n                                <label class=\"text-danger\" *ngIf=\"answerModel.get('Mark').touched && answerModel.get('Mark').errors?.required\">\n                                    Это поле обязательно.\n                                </label>        \n                            </div>\n                        </div> \n                    </div>\n                </form>\n                <br />\n            </div>\n            <div *ngIf=\"!end\">\n                <button class=\"btn btn-success\" style=\"margin-bottom: 20px; margin-left: 10px;\" type=\"submit\" [disabled]=\"!answerModel.valid\" (click)=\"onSubmit()\">Создать</button>\n            </div>\n        </div>\n    </div>\n","import { Component, OnInit } from '@angular/core';\nimport { TestService } from 'src/app/services/test.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Test } from 'src/app/models/test';\nimport { Question } from 'src/app/models/question';\nimport { Answer } from 'src/app/models/answer';\nimport { QuestionService } from 'src/app/services/question.service';\nimport { concatMap, tap, finalize } from 'rxjs/operators';\nimport { AnswerService } from 'src/app/services/answer.service';\nimport { from } from 'rxjs';\nimport { convertActionBinding } from '@angular/compiler/src/compiler_util/expression_converter';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-test-edit',\n  templateUrl: './test-edit.component.html',\n  styles: [\n  ]\n})\nexport class TestEditComponent implements OnInit {\n\n  testInfo: Map<Question, Answer[]>;\n  testId;\n  test: Test;\n  loaded: boolean;\n  showAddQuestion: boolean;\n  showFillQuestion: boolean;\n  questIdForNewAns;\n  newQuestion;\n  answersCount;\n\n  constructor(public testService: TestService, \n              private router: Router, \n              private questionService: QuestionService,\n              private answerService: AnswerService,\n              private toastr: ToastrService,\n              activeRoute: ActivatedRoute) {\n      this.testId = activeRoute.snapshot.params[\"id\"];\n  }\n\n  ngOnInit(){\n    if(this.testId){\n      this.testService.testModel.reset();\n      this.loadTest(true);\n    }\n  }\n\n  loadTest(withQA: boolean){\n    this.testService.getTestById(this.testId)\n      .subscribe((data: Test) =>{\n          this.test = data;\n          if(withQA == true){\n            this.loadTestInfoGet();\n          }\n      })\n  }\n\n  loadTestInfoGet() {\n    let testInfoGet = new Map<string, Answer[]>();\n    this.testService.getTestStart(this.testId)\n        .subscribe((data: Map<string, Answer[]>) => {\n            testInfoGet = data; this.loaded = true;\n            this.fillQuestions(testInfoGet);\n        })\n  }\n\n  fillQuestions(testInfoGet: Map<string, Answer[]>) {\n    this.testInfo = new Map<Question, Answer[]>();\n    for (let t in testInfoGet) {\n        this.questionService.getQuestionById(Number(t))\n            .subscribe((data1: Question) => {\n                this.fillTestInfo(testInfoGet, data1);\n            })\n    }\n  }\n\n  fillTestInfo(testInfo: Map<string, Answer[]>, question: Question) {\n    this.testInfo.set(question, testInfo[question[\"questionId\"].toString()]);\n  }\n\n  deleteQuestion(questionId: number){\n    this.questionService.deleteQuestion(questionId).subscribe(data => {\n       this.loadTestInfoGet();\n       this.toastr.success(\"Вопрос был удален.\",\"Успешно.\");\n      });\n  }\n\n  deleteAnswer(answerId: number){\n    this.answerService.deleteAnswer(answerId).subscribe(data => { \n      this.loadTestInfoGet();\n      this.toastr.success(\"Ответ был удален.\",\"Успешно.\");\n    });\n  }\n\n  addQuestion(){\n    this.showAddQuestion=true;\n  }\n\n  next(){\n    let isMultiple = document.getElementById('isMultiple') as HTMLInputElement;\n    let content = document.getElementById('content') as HTMLInputElement;\n    let answersCount = document.getElementById('answersCount') as HTMLInputElement;\n    let answerDescription = document.getElementById('ansDesc') as HTMLInputElement;\n    this.newQuestion = {\n      content: content.value,\n      isSingle: !isMultiple.checked,\n      answersCount: Number(answersCount.value),\n      answerDescription: answerDescription.value\n    };\n    this.answersCount=[];\n    for(let i = 0; i < this.newQuestion.answersCount; i++){\n      this.answersCount.push(i);\n    }\n    this.showFillQuestion = true;\n  }\n\n  onSubmit(){\n    let question = new Question();\n    question.Content = this.newQuestion.content;\n    question.IsSingle = this.newQuestion.isSingle;\n    question.AnswerDescription = this.newQuestion.answerDescription;\n    question.TestId = Number(this.testId);\n\n    let answers = [];\n    for(let i = 0; i < this.newQuestion.answersCount; i++){\n      let isCorrect = document.getElementById(`a_isCorrect_${i}`) as unknown as HTMLInputElement;\n      let content = document.getElementById(`a_content_${i}`) as unknown as HTMLInputElement;\n      let mark =  document.getElementById(`a_mark_${i}`) as unknown as HTMLInputElement;\n      \n      let answer = new Answer();\n      answer.IsCorrect = isCorrect.checked;\n      answer.Content = content.value;\n      answer.Mark = Number(mark.value);\n      answers.push(answer);\n    }\n\n    this.questionService.createQuestionForOldTest(question).pipe(\n      concatMap(data=> {\n          console.log(`question ${question.Content} done`);\n          return from(answers).pipe(\n              concatMap(answer => this.answerService.createAnswerForNewQuestion(answer).pipe(\n                  tap(data => console.log(`answer ${answer} done` ) ),\n              )),\n              finalize(() => {\n                console.log(\"final\");\n              }),\n          );\n      })\n    ).subscribe(data => { \n      this.showAddQuestion = false;\n      this.showFillQuestion = false;\n      this.loadTestInfoGet();\n      this.toastr.success(\"Вопрос был добавлен.\",\"Успешно.\");\n     });\n  }\n\n  saveTest() {\n    console.log(this.test.maxTime);\n    let title = document.getElementById('title') as HTMLInputElement;\n    let description = document.getElementById('description') as HTMLInputElement;\n    let maxTime = document.getElementById('maxTime') as HTMLInputElement;\n    let testTime = new Date();\n    if(maxTime.value != \"\"){\n      let Time = maxTime.value.split(\":\");\n      testTime.setMinutes(Number(Time[0]));\n      testTime.setSeconds(Number(Time[1]));\n      testTime.setMilliseconds(0); \n      this.test.maxTime = testTime;\n    }\n    this.test.title = title.value == \"\" ? this.test.title : title.value;\n    this.test.description = description.value == \"\" ? this.test.description : description.value;\n    console.log(this.test.maxTime);\n    this.testService.putTest(this.test).subscribe(data => {\n        this.toastr.success(\"Тест был изменен.\", \"Успешно.\");\n        this.testService.testModel.reset();\n        this.loadTest(false);\n    });\n  }\n\n  editQuestion(questionId){\n    let question = new Question();\n    let content = document.getElementById(`q_content_${questionId}`) as HTMLInputElement;\n    let isSingle = document.getElementById(`q_isSingle_${questionId}`) as HTMLInputElement;\n    let answerDescription = document.getElementById(`q_ansDesc_${questionId}`) as HTMLInputElement;\n    question.QuestionId = questionId;\n    question.Content = content.value;\n    question.AnswerDescription = answerDescription.value;\n    question.TestId = Number(this.testId);\n    question.IsSingle = isSingle.value==\"true\" ? true : false;\n    console.log(question);\n    this.questionService.editQuestion(question).subscribe(data => { \n      this.answerService.getAnswersByQuestionId(questionId).subscribe((data: Answer[]) => {\n        let answers = data;\n        answers.forEach(el => {\n          let answer = new Answer();\n          let content = document.getElementById(`a_content_${el[\"answerId\"]}`) as HTMLInputElement;\n          let isCorrect = document.getElementById(`a_isCorrect_${el[\"answerId\"]}`) as HTMLInputElement;\n          let mark = document.getElementById(`a_mark_${el[\"answerId\"]}`) as HTMLInputElement;\n          answer.QuestionId = questionId;\n          answer.AnswerId = el[\"answerId\"];\n          answer.Content = content.value;\n          answer.IsCorrect = isCorrect.checked;\n          answer.Mark = Number(mark.value);\n          this.answerService.editAnswer(answer).subscribe(data => { \n            this.loadTest(false);\n          });\n        })\n        this.toastr.success(\"Данные по вопросу были изменены.\",\"Успешно.\");\n      });\n    });\n  }\n\n  addAnswer(questionId){\n    this.questIdForNewAns = questionId == this.questIdForNewAns ? null : questionId;\n  }\n\n  saveNewAnswer(){\n    let answer = new Answer();\n    let content = document.getElementById('a_content_new') as HTMLInputElement;\n    let mark = document.getElementById('a_mark_new') as HTMLInputElement;\n    let isCorrect = document.getElementById('a_isCorrect_new') as HTMLInputElement;\n    answer.Content = content.value;\n    answer.IsCorrect = isCorrect != null ? isCorrect.checked : false;\n    answer.Mark = mark != null ? Number(mark.value) : 0;\n    answer.QuestionId = Number(this.questIdForNewAns);\n    this.answerService.createAnswerForOldQuestion(answer).subscribe(data => { \n      this.questIdForNewAns = null;\n      this.loadTestInfoGet();\n    });\n  }\n}\n","<div *ngIf=\"loaded\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-12 col-md-8 col-lg-6 pb-5\">\n                <h2 class=\"text-center\">Изменение данных о тесте</h2>\n                <form [formGroup]=\"testService.testModel\" autocomplete=\"off\">\n                    <div class=\"form-group\">\n                        <div class=\"input-group mb-2\">\n                            <input type=\"text\" formControlName=\"Title\" class=\"form-control\" id=\"title\" placeholder=\"Название\"><br>\n                        </div> \n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group mb-2\">\n                            <input type=\"text\" formControlName=\"Description\" class=\"form-control\" id=\"description\" placeholder=\"Описание\"><br>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <div class=\"input-group mb-2\">\n                            <input type=\"text\" formControlName=\"Time\" class=\"form-control\" id=\"maxTime\" placeholder=\"Время\"><br>\n                        </div>\n                        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('Time').touched && testService.testModel.get('Time').errors?.pattern\">\n                            Время введено неверно.\n                        </p>\n                    </div>\n                </form>\n                <div class=\"form-group text-center\">\n                    <input type=\"button\" value=\"Сохранить\" (click)=\"saveTest()\" class=\"btn btn-success\" [disabled]=\"testService.testModel.get('Time').errors?.pattern\"/>\n                </div>\n            </div>\n        </div>\n        <h1 class=\"text-center\">Тест</h1>\n        <table class=\"table mtable\">\n            <thead>\n                <tr>\n                    <td>Тест</td>\n                    <td>Описание</td>\n                    <td>Бал</td>\n                    <td>Количество вопросов</td>\n                    <td>Пройдено раз</td>\n                    <td>Время</td>\n                </tr> \n            </thead>\n            <tbody>\n                <tr>\n                    <td>{{test?.title}}</td>\n                    <td>{{test?.description}}</td>\n                    <td>{{test?.maxScore}}</td>\n                    <td>{{test?.questionsCount}}</td>\n                    <td>{{test?.passedTimes}}</td>\n                    <td>{{test?.maxTime.substring(14)}}</td>\n                </tr>\n            </tbody>\n        </table>\n        <div *ngIf=\"!showAddQuestion\">\n            <button class=\"btn btn-primary\" (click)=\"addQuestion()\">Добавить вопрос</button>\n        </div>\n        <br>\n        <div *ngIf=\"showAddQuestion\">\n            <div class=\"row\">\n                <span>Несколько правильных ответов?</span><input class=\"m-2\" type=\"checkbox\" id=\"isMultiple\"/>\n                <input type=\"text\" class=\"mx-3\" style=\"width: 300px;\" id=\"content\" placeholder=\"Текст вопроса\">\n                <input type=\"text\" class=\"mx-3\" style=\"width: 300px;\" id=\"ansDesc\" placeholder=\"Объяснение ответа\">\n                <label>Количество ответов:</label><input type=\"text\" class=\"ml-2\" style=\"width: 45px;\" id=\"answersCount\">\n            </div>\n            <div class=\"form-group text-center\">\n                <input type=\"button\" value=\"Далее\" (click)=\"next()\" class=\"btn btn-success m-3\"/>\n            </div>\n            <div *ngIf=\"showFillQuestion\">\n                <p><b>{{newQuestion.content}}</b></p>\n                <p><b>{{newQuestion.answerDescription}}</b></p>\n                <div class=\"col-12\" *ngFor=\"let s of answersCount; let i = index;\">\n                    <div class=\"row\">\n                        <div class=\"col-2\">\n                            <div class=\"row\">\n                                <div class=\"col-8\">\n                                    <p>Правильный?</p>\n                                </div>\n                                <div class=\"col-1\">\n                                    <div *ngIf=\"newQuestion.isSingle; else isMultiple\">\n                                        <input type=\"radio\" id=\"a_isCorrect_{{i}}\" name=\"a_isCorrect\"/>\n                                    </div>\n                                    <ng-template #isMultiple>\n                                        <input type=\"checkbox\" id=\"a_isCorrect_{{i}}\" name=\"a_isCorrect\"/>\n                                    </ng-template>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"row\">\n                                <div class=\"col-9\">\n                                    <input type=\"text\" style=\"width: 100%;\" placeholder=\"Контент\" id=\"a_content_{{i}}\" name=\"a_content\"/> \n                                </div>\n                                <div class=\"col-2\">\n                                    <input type=\"text\" style=\"width:100%\" placeholder=\"Бал\" id=\"a_mark_{{i}}\" name=\"a_mark\"/>\n                                </div> \n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <button class=\"btn btn-success\" style=\"margin-bottom: 20px; margin-left: 10px;\" type=\"submit\" (click)=\"onSubmit()\">Создать</button>\n            </div>\n        </div>\n        <div *ngIf=\"!showAddQuestion\"> \n            <div *ngFor=\"let item of testInfo | keyvalue; let i = index\">\n                <form name=\"form_{{i}}\">\n                    <b>{{i+1}}. Контент: </b>\n                    <input type=\"radio\" id=\"q_isSingle_{{item.key.questionId}}\" value=\"{{item.key.isSingle}}\" style=\"display: none\">\n                    <input type='text' style=\"width: 700px;\" id=\"q_content_{{item.key.questionId}}\" value=\"{{item.key.content}}\">\n                    <br>\n                    <b class=\"pl-3\">Объяснение ответа: </b>\n                    <input type='text' style=\"width: 614px;\" id=\"q_ansDesc_{{item.key.questionId}}\" value=\"{{item.key.answerDescription}}\">\n                    <div class=\"text-center my-2\">\n                        <button (click)=\"editQuestion(item.key.questionId)\" class=\"btn btn-sm btn-primary mx-3\">Сохранить</button>\n                        <button (click)=\"addAnswer(item.key.questionId)\" class=\"btn btn-sm btn-primary mr-3\">Добавить ответ</button>\n                        <button (click)=\"deleteQuestion(item.key.questionId)\" class=\"btn btn-sm btn-danger\">Удалить</button>\n                    </div>\n                    <div class=\"col-12\" *ngFor=\"let s of item.value\">\n                        <div class=\"row\">\n                            <div class=\"col-3 pr-0\" style=\"max-width: 13%!important;\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <p>Правильный?</p>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <div *ngIf=\"item.key.isSingle; else isMultiple\">\n                                            <div *ngIf=\"s.isCorrect\">\n                                                <input type=\"radio\" id=\"a_isCorrect_{{s.answerId}}\" name=\"answer\" value=\"{{s.isCorrect}}\" checked/>\n                                            </div>\n                                            <div *ngIf=\"!s.isCorrect\">\n                                                <input type=\"radio\" id=\"a_isCorrect_{{s.answerId}}\" name=\"answer\" value=\"{{s.isCorrect}}\"/>\n                                            </div>\n                                        </div>\n                                        <ng-template #isMultiple>\n\n                                            <div *ngIf=\"s.isCorrect\">\n                                                <input type=\"checkbox\" id=\"a_isCorrect_{{s.answerId}}\" name=\"answer\" value=\"{{s.isCorrect}}\" checked/>\n                                            </div>\n                                            <div *ngIf=\"!s.isCorrect\">\n                                                <input type=\"checkbox\" id=\"a_isCorrect_{{s.answerId}}\" name=\"answer\" value=\"{{s.isCorrect}}\"/>\n                                            </div>\n                                        </ng-template>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-9\">\n                                Контент:<input type='text' id=\"a_content_{{s.answerId}}\" style=\"width: 400px;\" class=\"mx-2\" value='{{s.content}}'>\n                                Бал: <input type='text' id=\"a_mark_{{s.answerId}}\" value=\"{{s.mark}}\" style=\"width: 45px;\">\n                                <button (click)=\"deleteAnswer(s.answerId)\" class=\"btn btn-sm btn-danger mx-3\">Удалить</button>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"questIdForNewAns == item.key.questionId\">\n                        <div class=\"col-12\">\n                            <p>Новый ответ:</p>\n                            <div class=\"row\">\n                                <div *ngIf=\"!item.key.isSingle\">\n                                    <p class=\"ml-3 my-0\">Правильный?:<input class=\"mx-1\" type=\"checkbox\" id=\"a_isCorrect_new\"/></p>\n                                </div>\n                                <p class=\"ml-3 mr-2 py-0 my-0\">Контент:</p>\n                                <input class=\"mr-3\" style=\"width: 300px;\" type='text' id=\"a_content_new\" >\n                                <div *ngIf=\"!item.key.isSingle\">\n                                    <p class=\"my-0\">Бал:\n                                    <input type='text' style=\"width: 45px;\" id=\"a_mark_new\"></p>\n                                </div>\n                                <button (click)=\"saveNewAnswer()\" class=\"btn btn-sm btn-primary mx-2\">Создать</button>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <br/><br/><br/>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { Test } from 'src/app/models/test';\nimport { TestService } from 'src/app/services/test.service';\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\n\n@Component({\n  selector: 'test-form',\n  templateUrl: './test-form.component.html',\n  styles: []\n})\nexport class TestFormComponent implements OnInit {\n\n  @Input() test: Test;\n  \n  constructor(public testService: TestService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form [formGroup]=\"testService.testModel\" autocomplete=\"off\">\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <!-- <div class=\"input-group-prepend\">\n            </div> -->\n            <input type=\"text\" formControlName=\"Title\" class=\"form-control\" [(ngModel)]=\"test.title\" placeholder=\"Название\"><br>\n        </div> \n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('Title').touched && testService.testModel.get('Title').errors?.required\">\n            Это поле обязательно.\n        </p>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <!-- <div class=\"input-group-prepend\">\n            </div> -->\n            <input type=\"text\" formControlName=\"Description\" class=\"form-control\" [(ngModel)]=\"test.description\" placeholder=\"Описание\"><br>\n        </div>\n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('Description').touched && testService.testModel.get('Description').errors?.required\">\n            Это поле обязательно.\n        </p>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <!-- <div class=\"input-group-prepend\">\n            </div> -->\n            <input type=\"text\" formControlName=\"QuestionsCount\" class=\"form-control\" [(ngModel)]=\"test.maxScore\" placeholder=\"Количество вопросов\"><br>\n        </div>\n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('QuestionsCount').touched && testService.testModel.get('QuestionsCount').errors?.questionCountRange\">\n            Количество вопросов введено неверно.\n        </p>\n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('QuestionsCount').touched && testService.testModel.get('QuestionsCount').errors?.required\">\n            Это поле обязательно.\n        </p>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <!-- <div class=\"input-group-prepend\">\n            </div> -->\n            <input type=\"text\" formControlName=\"Time\" class=\"form-control\" [(ngModel)]=\"test.maxTime\" placeholder=\"Время\"><br>\n        </div>\n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('Time').touched && testService.testModel.get('Time').errors?.pattern\">\n            Время введено неверно.\n        </p>\n        <p class=\"text-danger\" *ngIf=\"testService.testModel.get('Time').touched && testService.testModel.get('Time').errors?.required\">\n            Это поле обязательно.\n        </p>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TestService } from 'src/app/services/test.service';\nimport { Test } from 'src/app/models/test';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-test-list',\n  templateUrl: './test-list.component.html',\n  styles: [\n  ]\n})\nexport class TestListComponent implements OnInit {\n\n  previousTests: Test[];\n  pageNumber: number = 1;\n  tests: Test[];\n  constructor(private testService: TestService, private toastr: ToastrService) { }\n\n  ngOnInit() {\n    this.loadTests();\n  }\n\n  loadTests() {\n    this.testService.getTestsForPagination(this.pageNumber).subscribe((data: Test[]) => {\n      this.tests = data;\n      if(data.length != 0 ){\n        this.previousTests = data;\n      }\n      else{\n        this.tests = this.previousTests;\n        this.pageNumber--;\n      }\n    })\n  }\n\n  nextPage(){\n    this.pageNumber++;\n    this.loadTests();\n  }\n\n  previousPage(){\n    if(this.pageNumber > 1){\n      this.pageNumber--;\n    }\n    this.loadTests();\n  }\n\n  delete(id: string) {\n    var result = confirm(\"Вы уверены что хотите удалить этот тест?\");\n    if(result == true){\n      this.testService.deleteTest(id).subscribe(data => { \n        this.pageNumber--;\n        this.loadTests(); \n        this.toastr.success('Тест был удален.','Успешно.');\n      }),\n      err => {\n        this.toastr.success('Тест не был удален. Что-то пошло не так.','Безуспешно.');\n        console.log(err);\n      };\n    }\n  } \n}\n","<div class=\"col-lg-6 floating\" class=\"container\">\n    <div class=\"text-center\">\n        <button routerLink= \"/admin-panel/test-create\" class=\"btn btn-sm btn-primary\">Создать тест</button>\n    </div>\n    <h1 style=\"text-align: center\">Список тестов</h1>\n    <div class=\"text-center\">\n        <button class=\"btn btn-sm btn-info mx-3\" (click)=\"previousPage()\"><</button>\n        <button class=\"btn btn-sm btn-info\" (click)=\"nextPage()\">></button>\n    </div>\n    <table class=\"table mtable\">\n        <thead>\n            <tr>\n                <td>Тест</td>\n                <td>Описание</td>\n                <td>Количество вопросов</td>\n                <td>Бал</td>\n                <td>Пройдено раз</td>\n                <td>Время</td> \n                <td>Операции</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let t of tests\">\n                <td>{{t?.title}}</td>\n                <td>{{t?.description}}</td>\n                <td>{{t?.questionsCount}}</td>\n                <td>{{t?.maxScore}}</td>\n                <td>{{t?.passedTimes}}</td>\n                <td>{{t?.maxTime.substring(14)}}</td>\n                <td>\n                    <a routerLink=\"/admin-panel/test-edit/{{t.testId}}\" class=\"btn btn-sm btn-primary\" style=\"margin-right: 5px;\">Изменить</a>\n                    <button (click)=\"delete(t.testId)\" class=\"btn btn-sm btn-danger\">Удалить</button>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { TestResult } from 'src/app/models/testResult';\nimport { UserTestService } from 'src/app/services/usertest.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-test-create',\n  templateUrl: './user-test-create.component.html',\n  styles: []\n})\nexport class UserTestCreateComponent implements OnInit {\n\n  userTest;\n  \n  constructor(private toastr: ToastrService, public userTestService: UserTestService,\n              private router: Router, activeRoute: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    this.userTestService.userTestModel.reset();\n    this.userTest = new TestResult();\n  }\n\n  create(){\n    let testResult = new TestResult();\n\n    let time = new Date();\n    let userTestTime = this.userTest.Time.split(\":\");\n    time.setMinutes(userTestTime[0]);\n    time.setSeconds(userTestTime[1]);\n    time.setMilliseconds(0);\n\n    var username = document.getElementById(\"Username\") as HTMLInputElement;\n    var testTitle = document.getElementById(\"TestTitle\") as HTMLInputElement;\n\n    testResult.Username = username.value;\n    testResult.TestTitle = testTitle.value;\n    testResult.Mark = Number(this.userTest.Mark);\n    testResult.Time = time;\n    this.userTestService.postTestResultByAdmin(testResult)\n      .subscribe(data => { \n        this.userTestService.userTestModel.reset();\n        this.toastr.success(\"Результат теста был создан.\", \"Успешно.\");\n        this.router.navigateByUrl(\"/admin-panel\")\n      },\n      err => {\n        if(err.error == \"User was not found\"){\n          this.toastr.error(\"Пользователь с таким именем не был найден.\", \"Результат теста не был создан.\")\n        }\n        else if(err.error == \"Test was not found\"){\n          this.toastr.error(\"Тест с таким названием не был найден.\", \"Результат теста не был создан.\")\n        }\n        else if(err.error == \"Test result`s time can not be higher than test`s maximum time\"){\n          this.toastr.error(\"Время прохождения теста не может быть больше чем максимально допустимое время теста.\", \"Результат теста не был создан.\")\n        }\n      });\n  }\n}\n","<div class=\"container\">\n    <div class=\"row justify-content-center\">\n        <div class=\"col-12 col-md-8 col-lg-6 pb-5\">\n            <h2 class=\"text-center\">Создание результата теста</h2>\n            <user-test-form-ut [(userTest)]=\"userTest\"></user-test-form-ut>\n            <user-test-form-mt [(userTest)]=\"userTest\"></user-test-form-mt>\n            <div class=\"form-group text-center\">\n                <input type=\"button\" value=\"Создать\" (click)=\"create()\" class=\"btn btn-success\" [disabled]=\"!userTestService.userTestModel.valid\"/>\n            </div>\n        </div>\n    </div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { TestResult } from 'src/app/models/testResult';\nimport { UserTestService } from 'src/app/services/usertest.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { UserTestFormMTComponent } from '../user-test-form-mt/user-test-form-mt.component';\n\n@Component({\n  selector: 'app-user-test-edit',\n  templateUrl: './user-test-edit.component.html',\n  styleUrls: []\n})\nexport class UserTestEditComponent implements OnInit {\n\n  loaded: boolean;\n  id;\n  userTest;\n  userTestTime;\n  userTestMark;\n  constructor(public userTestService: UserTestService, activeRoute: ActivatedRoute, private toastr: ToastrService) {\n    this.id = activeRoute.snapshot.params[\"id\"];\n  }\n\n  ngOnInit() {\n    if (this.id){\n        this.loadUserTest();\n    }\n  }\n\n  save() {\n    if(this.userTest.Time != null || this.userTest.Mark != null){\n      let testResult = new TestResult();\n      let time = new Date();\n      if(this.userTest.Time != null){\n        let userTestTime = this.userTest.Time.split(\":\");\n        time.setMinutes(userTestTime[0]);\n        time.setSeconds(userTestTime[1]);\n        time.setMilliseconds(0);\n        testResult.Time = time;\n      }\n      else{\n        testResult.Time = this.userTestTime;\n      }\n      if(this.userTest.Mark != null){\n        testResult.Mark = Number(this.userTest.Mark);\n      }\n      else{\n        testResult.Mark = this.userTestMark;\n      }\n      testResult.UserTestId = this.userTest.userTestId;\n      testResult.UserId = this.userTest.userId;\n      testResult.TestId = this.userTest.testId;\n      this.userTestService.putUserTest(testResult).subscribe(data => {\n        this.userTestService.userTestModel.reset();\n        this.toastr.success(\"Данные о результате теста были изменены.\",\"Успешно.\");\n        this.loadUserTest();\n      },\n      err => {\n        if(err.error == \"Test result`s time can not be higher than test`s maximum time\"){\n          this.toastr.error(\"Время прохождения теста не может быть больше чем максимально допустимое время теста.\", \"Результат теста не был создан.\")\n        }\n      });\n    }\n    else{ \n      this.toastr.error(\"Введите данные для результата теста.\", \"Безуспешно.\");\n    }\n  }\n\n  loadUserTest(){\n    this.userTestService.getUserTestById(this.id)\n      .subscribe((data: object) =>{\n        this.userTestTime = data[\"time\"];\n        this.userTestMark = data[\"mark\"];\n        this.userTest = data;\n        this.loaded = true;\n      })\n  }\n}\n","<div *ngIf=\"loaded\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-12 col-md-8 col-lg-6 pb-5\">\n                <h2 class=\"text-center\">Изменение данных о результате теста пользователе</h2>\n                <user-test-form-mt [(userTest)]=\"userTest\"></user-test-form-mt>\n                <div class=\"form-group text-center\">\n                    <input type=\"button\" value=\"Сохранить\" (click)=\"save()\" class=\"btn btn-success\"/>\n                </div>\n            </div>\n        </div>\n        <table class=\"table mtable\">\n            <thead>\n                <tr>\n                    <td>Пользователь</td>\n                    <td>Тест</td>\n                    <td>Результат</td>\n                    <td>Время</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>{{userTest?.username}}</td>\n                    <td>{{userTest?.test}}</td>\n                    <td>{{userTest?.mark}}%</td>\n                    <td>{{userTest?.time.substring(14)}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { TestResult } from 'src/app/models/testResult';\nimport { UserTestService } from 'src/app/services/usertest.service';\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\n\n@Component({\n  selector: 'user-test-form-mt',\n  templateUrl: './user-test-form-mt.component.html',\n  styles: [\n  ]\n})\nexport class UserTestFormMTComponent implements OnInit {\n\n  @Input() userTest: TestResult;\n\n  constructor(public userTestService: UserTestService) { }\n\n  ngOnInit(): void {\n  }\n}\n","<form [formGroup]=\"userTestService.userTestModel\" autocomplete=\"off\">\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <input type=\"text\" formControlName=\"Mark\" class=\"form-control\" [(ngModel)]=\"userTest.Mark\" placeholder=\"Результат\">\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('Mark').touched && userTestService.userTestModel.get('Mark').errors?.markRange\">\n                Бал введен неверно.\n            </label>\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('Mark').touched && userTestService.userTestModel.get('Mark').errors?.required\">\n                Это поле обязательное.\n            </label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <input type=\"text\" formControlName=\"Time\" class=\"form-control\" [(ngModel)]=\"userTest.Time\" placeholder=\"Время - 03:00\">\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('Time').touched && userTestService.userTestModel.get('Time').errors?.pattern\">\n                Время введено неверно.\n            </label>\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('Time').touched && userTestService.userTestModel.get('Time').errors?.required\">\n                Это поле обязательное.\n            </label>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { TestResult } from 'src/app/models/testResult';\nimport { UserTestService } from 'src/app/services/usertest.service';\n\n@Component({\n  selector: 'user-test-form-ut',\n  templateUrl: './user-test-form-ut.component.html',\n  styles: [\n  ]\n})\nexport class UserTestFormUTComponent implements OnInit {\n\n  @Input() userTest: TestResult;\n  \n  constructor(public userTestService: UserTestService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form [formGroup]=\"userTestService.userTestModel\" autocomplete=\"off\">\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <input type=\"text\" class=\"form-control\" formControlName=\"Username\" id=\"Username\" placeholder=\"Имя пользователя\">\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('Username').touched && userTestService.userTestModel.get('Username').errors?.required\">\n                Это поле обязательное.\n            </label>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <input type=\"text\" class=\"form-control\" formControlName=\"TestTitle\" id=\"TestTitle\" placeholder=\"Название теста\">\n            <label class=\"text-danger\" *ngIf=\"userTestService.userTestModel.get('TestTitle').touched && userTestService.userTestModel.get('TestTitle').errors?.required\">\n                Это поле обязательное.\n            </label>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserTestService } from 'src/app/services/usertest.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-test-list',\n  templateUrl: './user-test-list.component.html',\n  styles: []\n})\n\nexport class UserTestListComponent implements OnInit {\n\n  previousUserTests: object[];\n  userTests: object[];\n  pageNumber: number = 1;\n  constructor(private router: Router, private toastr: ToastrService, private userTestService: UserTestService) { }\n\n  ngOnInit() {\n    this.loadUserTests();\n  }\n\n  loadUserTests(){\n    this.userTestService.getUserTestsForPagination(this.pageNumber).subscribe((data: object[]) => {\n      this.userTests = data;\n      if(data.length != 0 ){\n        this.previousUserTests = data;\n      }\n      else{\n        this.userTests = this.previousUserTests;\n        this.pageNumber--;\n      }\n    })\n  } \n\n  nextPage(){\n    this.pageNumber++;\n    this.loadUserTests();\n  }\n\n  previousPage(){\n    if(this.pageNumber > 1){\n      this.pageNumber--;\n    }\n    this.loadUserTests();\n  }\n\n  deleteUserTest(id: string) {\n    var result = confirm(\"Вы уверены что хотите удалить этот результат?\");\n    if(result == true){\n      this.userTestService.deleteUserTest(id).subscribe(data => this.loadUserTests());\n      this.toastr.success(\"Результат прохождения теста был удален.\", \"Успешно.\")\n    }\n  } \n}\n","<div class=\"container\">\n    <div class=\"text-center\">\n        <button routerLink= \"/admin-panel/user-test-create\" class=\"btn btn-sm btn-primary\">Добавить результат</button>\n    </div>\n    <h1 style=\"text-align: center\">Список результатов пользователей</h1>\n    <div class=\"text-center\">\n        <button class=\"btn btn-sm btn-info mx-3\" (click)=\"previousPage()\"><</button>\n        <button class=\"btn btn-sm btn-info\" (click)=\"nextPage()\">></button>\n    </div>\n    <table class=\"table mtable\"> \n        <thead>\n            <tr>\n                <td>Пользователь</td>\n                <td>Тест</td>\n                <td>Результат</td>\n                <td>Время</td>\n                <td>Операции</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let u of userTests\">\n                <td>{{u?.username}}</td>\n                <td>{{u?.test}}</td>\n                <td>{{u?.mark}}%</td>\n                <td>{{u?.time.substring(14)}}</td>\n                <td>\n                    <a routerLink=\"/admin-panel/user-test-edit/{{u.userTestId}}\" class=\"btn btn-sm btn-primary\" style=\"margin-right: 5px;\">Изменить</a>\n                    <button (click)=\"deleteUserTest(u.userTestId)\" class=\"btn btn-sm btn-danger\">Удалить</button>\n                </td>\n            </tr>\n        </tbody>\n    </table> \n</div>","import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { UserService } from 'src/app/services/user.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UserTestService } from 'src/app/services/usertest.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-edit',\n  templateUrl: './user-edit.component.html',\n  styles: []\n})\nexport class UserEditComponent implements OnInit {\n\n  id: string;\n  user: User;\n  loaded: boolean = false;\n  userTests;\n\n  constructor(public userService: UserService,\n              private userTestService: UserTestService, private router: Router, \n              private toastr: ToastrService, activeRoute: ActivatedRoute) { \n      this.id = activeRoute.snapshot.params[\"id\"];\n  }\n  \n  ngOnInit() {\n    if (this.id){\n        this.userService.getUser(this.id)\n            .subscribe((data: User) => {\n                this.user = data;\n                if (this.user != null) {\n                    this.loaded = true;\n                }\n            });\n        this.loadUserTests();\n    }\n  }\n\n  onSubmit() {\n    var img = document.createElement(\"img\");\n    img.src = this.user.ProfileImageUrl;\n    img.onerror = () => {\n      if(!this.user.ProfileImageUrl){\n        this.saveUser();\n      }\n      else{\n        this.toastr.error(\"Ссылка на картинку недействительна.\", \"Безуспешно.\");;\n      }\n    }\n    img.onload = () => {\n      this.saveUser();\n    }\n  }\n\n  saveUser(){\n    if(this.user.Email != null || this.user.UserName != null || this.user.AboutMe != null || this.user.ProfileImageUrl != null){\n      this.userService.putUser(this.user)\n        .subscribe(data => { \n          this.userService.emailModel.reset();\n          (document.getElementById('Username') as HTMLInputElement).value = \"\";\n          (document.getElementById('AboutMe') as HTMLInputElement).value = \"\";\n          (document.getElementById('ProfileImageUrl') as HTMLInputElement).value = \"\";\n          this.toastr.success(\"Данные о пользователе были изменены.\", \"Успешно.\")\n        });\n    }\n    else{\n      this.toastr.error(\"Введите новые данные пользователя\", \"Безуспешно.\")\n    }\n  }\n\n  loadUserTests(){\n    this.userTestService.getUserTestsByUserId(this.id)\n      .subscribe((data: object[]) =>{\n         this.userTests = data;\n      })\n  }\n\n  deleteTestResult(id: string) {\n    var result = confirm(\"Вы уверены что хотите удалить результат теста?\");\n    if(result == true){\n      this.userTestService.deleteUserTest(id).subscribe(data => this.loadUserTests());\n      this.toastr.success(\"Результат прохождения теста был удален.\", \"Успешно.\")\n    }\n  } \n\n  makeUserAdmin(){\n    this.user.Role = \"admin\";\n    this.userService.changeUserRole(this.user)\n      .subscribe((res: any) => {\n        if (res.succeeded) {\n          this.toastr.success('Пользователь назначен администратором.', 'Успешно.');\n        } \n        else {\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case 'UserAlreadyInRole':\n                this.toastr.error('Пользователь уже был назначен администратором.','Безуспешно.');\n                break;\n              default:\n                this.toastr.error(element.description,'Безуспешно.');\n                break;\n            }\n          });\n        }\n      },\n      err => {\n        this.toastr.error('Что-то пошло не так.', 'Безуспешно.');\n      })\n  }\n\n  makeUserCustomer(){\n    this.user.Role = \"customer\";\n    this.userService.changeUserRole(this.user)\n      .subscribe((res: any) => {\n        if (res.succeeded) {\n          this.toastr.success('Пользователь назначен клиентом.', 'Успешно.');\n        } \n        else {\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case 'UserAlreadyInRole':\n                this.toastr.error('Пользователь уже был назначен клиентом.','Безуспешно.');\n                break;\n              default:\n                this.toastr.error(element.description,'Безуспешно.');\n                break;\n            }\n          });\n        }\n      },\n      err => {\n        console.log(err);\n        this.toastr.error('Что-то пошло не так.', 'Безуспешно.');\n      })}\n}\n","<div *ngIf=\"loaded\">\n    <div class=\"container\">\n        <div class=\"row justify-content-center\">\n            <div class=\"col-12 col-md-8 col-lg-6 pb-5\">\n                <h2>Изменение данных о пользователе</h2>\n                <user-form [(user)]=\"user\"></user-form>\n                <div class=\"form-group text-center\" >\n                    <input type=\"button\" value=\"Сохранить\" (click)=\"onSubmit()\" [disabled]=\"!userService.emailModel.valid\" class=\"btn btn-success\" />\n                </div>\n            </div>\n        </div>\n        <div class=\"text-center\">\n            <input type=\"button\" value=\"Назначить администратором\" (click)=\"makeUserAdmin()\" class=\"btn btn-info mx-3\"/>\n            <input type=\"button\" value=\"Назначить клиентом\" (click)=\"makeUserCustomer()\" class=\"btn btn-info mx-3\"/> \n            <a routerLink=\"/account/{{id}}\" class=\"btn btn-info mx-3\">Личный кабинет</a>\n        </div>\n        <br><br>\n        <h1 class=\"text-center\">Пройденные тесты</h1>\n        <table class=\"table mtable\">\n            <thead>\n                <tr>\n                    <td>Тест</td>\n                    <td>Результат</td>\n                    <td>Время</td>\n                    <td>Операции</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let u of userTests\">\n                    <td>{{u?.test}}</td>\n                    <td>{{u?.mark}}%</td>\n                    <td>{{u?.time.substring(14)}}</td>\n                    <td>\n                        <a routerLink=\"/admin-panel/user-test-edit/{{u.id}}\" class=\"btn btn-sm btn-primary\" style=\"margin-right: 5px;\">Изменить</a>\n                        <button (click)=\"deleteTestResult(u.id)\" class=\"btn btn-sm btn-danger\">Удалить</button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { UserEditComponent } from '../user-edit/user-edit.component';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from 'src/app/services/user.service';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styles: []\n})\nexport class UserFormComponent implements OnInit {\n\n  @Input() user: User;\n  \n  constructor(public userService: UserService, private fb: FormBuilder) { }\n\n  ngOnInit(): void{\n    this.userService.emailModel.reset(); \n  }\n}\n","<div class=\"form-group\">\n    <div class=\"input-group mb-2\">\n        <div class=\"input-group-prepend\">\n            <div class=\"input-group-text\"><i class=\"fa fa-user text-info\"></i></div>\n        </div>\n        <input type=\"text\" class=\"form-control\" id=\"Username\" [(ngModel)]=\"user.UserName\" placeholder=\"Alex\">\n    </div>\n</div>\n<form [formGroup]=\"userService.emailModel\" autocomplete=\"off\">\n    <div class=\"form-group\">\n        <div class=\"input-group mb-2\">\n            <div class=\"input-group-prepend\">\n                <div class=\"input-group-text\"><i class=\"fa fa-envelope text-info\"></i></div>\n            </div>\n            <input type=\"email\" formControlName=\"UserEmail\" class=\"form-control\" [(ngModel)]=\"user.Email\" placeholder=\"Email@gmail.com\">\n            <label class=\"text-danger\" *ngIf=\"userService.emailModel.get('UserEmail').touched && userService.emailModel.get('UserEmail').errors?.email\">\n                Почта введена неверно.\n            </label>\n        </div>\n    </div>\n</form>\n<div class=\"form-group\">\n    <div class=\"input-group mb-2\">\n        <input type=\"text\" class=\"form-control\" id=\"ProfileImageUrl\" [(ngModel)]=\"user.AboutMe\" placeholder=\"О себе\">\n    </div>\n</div>\n<div class=\"form-group\">\n    <div class=\"input-group mb-2\">\n        <input type=\"text\" class=\"form-control\" id=\"AboutMe\" [(ngModel)]=\"user.ProfileImageUrl\" placeholder=\"Ссылка на аватар\">\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { Router } from '@angular/router';\nimport { UserService } from 'src/app/services/user.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styles: []\n})\nexport class UserListComponent implements OnInit {\n\n  previousUsers: User[];\n  users: User[];\n  pageNumber: number = 1;\n  constructor(private toastr: ToastrService, private userService: UserService) { }\n \n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  loadUsers(){\n    this.userService.getUsersForPagination(this.pageNumber).subscribe((data: User[]) => {\n      this.users = data;\n      if(data.length != 0 ){\n        this.previousUsers = data;\n      }\n      else{\n        this.users = this.previousUsers;\n        this.pageNumber--;\n      }\n    })\n  }\n\n  nextPage(){\n    this.pageNumber++;\n    this.loadUsers();\n  }\n\n  previousPage(){\n    if(this.pageNumber > 1){\n      this.pageNumber--;\n    }\n    this.loadUsers();\n  }\n\n  delete(id: string) {\n    var result = confirm(\"Вы уверены что хотите удалить этого пользователя?\");\n    if(result == true){\n      this.userService.deleteUser(id).subscribe(data => this.loadUsers());\n      this.toastr.success(\"Пользователь был удален.\", \"Успешно.\")\n    }\n  } \n}\n","<div class=\"container\">\n    <h1 style=\"text-align: center\">Список пользователей</h1>\n    <div class=\"text-center\">\n        <button class=\"btn btn-sm btn-info mx-3\" (click)=\"previousPage()\"><</button>\n        <button class=\"btn btn-sm btn-info\" (click)=\"nextPage()\">></button>\n    </div>\n    <table class=\"table mtable\">\n        <thead>\n            <tr>\n                <td>Почта</td>\n                <td>Имя пользователя</td>\n                <td>Операции</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let u of users\">\n                <td>{{u?.email}}</td>\n                <td>{{u?.username}}</td>\n                <td>\n                    <a routerLink=\"/admin-panel/user-edit/{{u.id}}\" class=\"btn btn-sm btn-primary\" style=\"margin-right: 5px;\">Изменить</a>\n                    <button (click)=\"delete(u.id)\" class=\"btn btn-sm btn-danger\">Удалить</button>\n                </td>\n            </tr>\n        </tbody>\n    </table> \n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { UserComponent } from './user/user.component';\nimport { RegistrationComponent } from './user/registration/registration.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { AuthGuard } from './auth/auth.guard';\nimport { TestStartComponent } from './test-start/test-start.component';\nimport { ExitTestStartGuard } from './test-start/exit.test-start.guard';\nimport { ForbiddenComponent } from './forbidden/forbidden.component';\nimport { AdminPanelComponent } from './admin-panel/admin-panel.component';\nimport { UserEditComponent } from './admin-panel/user/user-edit/user-edit.component';\nimport { UserListComponent } from './admin-panel/user/user-list/user-list.component';\nimport { AccountComponent } from './account/account.component';\nimport { TestInfoComponent } from './test-info/test-info.component';\nimport { TestListComponent } from './admin-panel/test/test-list/test-list.component';\nimport { TestEditComponent } from './admin-panel/test/test-edit/test-edit.component';\nimport { TestCreateComponent } from './admin-panel/test/test-create/test-create.component';\nimport { UserTestListComponent } from './admin-panel/user-test/user-test-list/user-test-list.component';\nimport { UserTestEditComponent } from './admin-panel/user-test/user-test-edit/user-test-edit.component';\nimport { UserTestCreateComponent } from './admin-panel/user-test/user-test-create/user-test-create.component';\nimport { ConfirmEmailComponent } from './user/confirm-email/confirm-email.component';\nimport { ForgotPasswordComponent } from './user/forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './user/reset-password/reset-password.component';\nimport { ExternalLoginComponent } from './user/external-login/external-login.component';\n\n\nconst routes: Routes = [\n  { path: '', redirectTo:'/home', pathMatch:'full' },\n  {\n    path: 'user', component: UserComponent,\n    children: [\n      { path: 'registration', component: RegistrationComponent },\n      { path: 'login', component: LoginComponent },\n      { path: 'confirm-email', component: ConfirmEmailComponent },\n      { path: 'forgot-password', component: ForgotPasswordComponent },\n      { path: 'reset-password', component: ResetPasswordComponent },\n      { path: 'external-login', component: ExternalLoginComponent }\n    ]\n  },\n  { path: 'home', component: HomeComponent },\n  { path: 'forbidden', component: ForbiddenComponent, canActivate: [AuthGuard]},\n  { \n    path: 'admin-panel', component: AdminPanelComponent, canActivate: [AuthGuard], data: { permittedRoles: ['admin'] },\n    children: [\n      { path: 'user-edit/:id', component: UserEditComponent },\n      { path: 'user-list', component: UserListComponent },\n      { path: 'test-list', component: TestListComponent },\n      { path: 'test-edit/:id', component: TestEditComponent },\n      { path: 'test-create', component: TestCreateComponent },\n      { path: 'user-test-list', component: UserTestListComponent },\n      { path: 'user-test-edit/:id', component: UserTestEditComponent },\n      { path: 'user-test-create', component: UserTestCreateComponent }\n    ]\n  },\n  { path: 'account', component: AccountComponent, canActivate: [AuthGuard], },\n  { path: 'account/:id', component: AccountComponent },\n  { path: 'teststart/:id', component: TestStartComponent, canActivate: [AuthGuard], canDeactivate: [ExitTestStartGuard] },\n  { path: 'test/:id', component: TestInfoComponent },\n  { path: '**', redirectTo: '/' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: []\n})\n\nexport class AppComponent implements OnInit {\n  title = 'Knowledge Testing System';\n\n  constructor(private spinner: NgxSpinnerService, private router: Router) {}\n \n  ngOnInit() {\n    /** spinner starts on init */\n    this.spinner.show();\n \n    setTimeout(() => {\n      /** spinner ends after 5 seconds */\n      this.spinner.hide();\n    }, 500);\n  }\n\n  onLogout() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/user/login']);\n  }\n}\n","<nav class=\"navbar navbar-dark bg-dark\">\r\n    <a class=\"navbar-brand text-white\" routerLink=\"/home\">Knowledge Testing System</a>\r\n    <ul class=\"navbar-nav mr-auto\">\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" routerLink=\"/admin-panel\">Admin Panel</a>\r\n      </li>\r\n    </ul>\r\n    <button class=\"btn btn-info place\" routerLink=\"/account\">Личный кабинет</button>\r\n    <button class=\"btn btn-danger my-2 my-sm-0\" (click)=\"onLogout()\">Выход</button>\r\n  </nav>\r\n<ngx-spinner></ngx-spinner>\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastrModule } from 'ngx-toastr';\nimport { NgxSpinnerModule } from \"ngx-spinner\";\n\nimport { environment } from '../environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UserComponent } from './user/user.component';\nimport { RegistrationComponent } from './user/registration/registration.component';\nimport { LoginComponent } from './user/login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { AuthInterceptor } from './auth/auth.interceptor';\nimport { TestStartComponent } from './test-start/test-start.component';\nimport { ExitTestStartGuard } from './test-start/exit.test-start.guard';\nimport { AdminPanelComponent } from './admin-panel/admin-panel.component';\nimport { ForbiddenComponent } from './forbidden/forbidden.component';\nimport { UserFormComponent } from './admin-panel/user/user-form/user-form.component';\nimport { UserListComponent } from './admin-panel/user/user-list/user-list.component';\nimport { UserEditComponent } from './admin-panel/user/user-edit/user-edit.component';\nimport { AccountComponent } from './account/account.component';\nimport { TestService } from './services/test.service';\nimport { AuthService } from './services/auth.service';\nimport { UserService } from './services/user.service';\nimport { UserTestService } from './services/usertest.service';\nimport { TestInfoComponent } from './test-info/test-info.component';\nimport { TestListComponent } from './admin-panel/test/test-list/test-list.component';\nimport { TestEditComponent } from './admin-panel/test/test-edit/test-edit.component';\nimport { TestFormComponent } from './admin-panel/test/test-form/test-form.component';\nimport { QuestionService } from './services/question.service';\nimport { AnswerService } from './services/answer.service';\nimport { TestCreateComponent } from './admin-panel/test/test-create/test-create.component';\nimport { UserTestListComponent } from './admin-panel/user-test/user-test-list/user-test-list.component';\nimport { UserTestFormUTComponent } from './admin-panel/user-test/user-test-form-ut/user-test-form-ut.component';\nimport { UserTestEditComponent } from './admin-panel/user-test/user-test-edit/user-test-edit.component';\nimport { UserTestFormMTComponent } from './admin-panel/user-test/user-test-form-mt/user-test-form-mt.component';\nimport { UserTestCreateComponent } from './admin-panel/user-test/user-test-create/user-test-create.component';\nimport { ConfirmEmailComponent } from './user/confirm-email/confirm-email.component';\nimport { ForgotPasswordComponent } from './user/forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './user/reset-password/reset-password.component';\nimport { ExternalLoginComponent } from './user/external-login/external-login.component';\nimport { AccountService } from './services/account.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    UserComponent,\n    RegistrationComponent,\n    LoginComponent,\n    HomeComponent,\n    HomeComponent,\n    TestStartComponent,\n    AdminPanelComponent,\n    ForbiddenComponent,\n    UserFormComponent,\n    UserListComponent,\n    UserEditComponent,\n    AccountComponent,\n    TestInfoComponent,\n    TestListComponent,\n    TestEditComponent,\n    TestFormComponent,\n    TestCreateComponent,\n    UserTestListComponent,\n    UserTestFormUTComponent,\n    UserTestEditComponent,\n    UserTestFormMTComponent,\n    UserTestCreateComponent,\n    ConfirmEmailComponent,\n    ForgotPasswordComponent,\n    ResetPasswordComponent,\n    ExternalLoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    NgxSpinnerModule,\n    ToastrModule.forRoot({\n      progressBar: true\n    }),\n    FormsModule\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  providers: [\n    UserService,\n    TestService, \n    QuestionService,\n    AnswerService,\n    AuthService, \n    AccountService,\n    UserTestService,\n    UserFormComponent,\n    TestFormComponent,\n    UserTestFormMTComponent,\n    ExitTestStartGuard, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: AuthInterceptor,\n    multi: true\n  }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n\r\n  constructor(private router: Router, private authService: AuthService) {\r\n  }\r\n  canActivate(\r\n    next: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): boolean {\r\n    if (localStorage.getItem('token') != null){\r\n      let roles = next.data['permittedRoles'] as Array<string>;\r\n      if(roles){\r\n        if(this.authService.roleMatch(roles)){\r\n          return true;\r\n        }\r\n        else{\r\n          this.router.navigate(['/forbidden']);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n    else {\r\n      this.router.navigate(['/user/login']);\r\n      return false;\r\n    }\r\n  }\r\n}","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { tap } from \"rxjs/operators\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private router: Router) {\r\n\r\n    }\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (localStorage.getItem('token') != null) {\r\n            const clonedReq = req.clone({\r\n                headers: req.headers.set('Authorization', 'Bearer ' + localStorage.getItem('token'))\r\n            });\r\n            return next.handle(clonedReq).pipe(\r\n                tap(\r\n                    succ => { },\r\n                    err => {\r\n                        if (err.status == 401){\r\n                            localStorage.removeItem('token');\r\n                            this.router.navigateByUrl('/user/login');\r\n                        }\r\n                        else if(err.status == 403){\r\n                            this.router.navigateByUrl('/forbidden');\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n        }\r\n        else\r\n            return next.handle(req.clone());\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-forbidden',\n  templateUrl: './forbidden.component.html',\n  styles: [\n  ]\n})\nexport class ForbiddenComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n    <div class=\"col s6 offset-s3\">\n      <div class=\"card\">\n        <div class=\"card-image\">\n          <img src=\"/assets/img/403.png\" style=\"height:300px;width:300px;\">\n  \n        </div>\n        <div class=\"card-content\">\n          <span class=\"card-title\" style=\"color:#039be5\">403 - ACCESS DENIED</span>\n          <p>You don't have the permission to access this resource.</p>\n        </div>\n      </div>\n    </div>\n  </div>","import { UserTestService } from '../services/usertest.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Test } from '../models/test';\nimport { TestService } from '../services/test.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  title: string;\n  previousTests: Test[];\n  pageNumber: number = 1;\n  tests: Test[]; \n  userTests;\n\n  constructor(private router: Router, private userTestService: UserTestService, private testService: TestService) { }\n\n  ngOnInit() {\n    this.loadTests();\n    this.loadUserTests();\n  }\n\n  loadTests() {\n    this.testService.getTestsForPagination(this.pageNumber).subscribe((data: Test[]) => {\n      this.tests = data;\n      if(data.length != 0 ){\n        this.previousTests = data;\n      }\n      else{\n        this.tests = this.previousTests;\n        this.pageNumber--;\n      }\n    })\n  }\n\n  nextPage(){\n    this.pageNumber++;\n    this.loadTests();\n  }\n\n  previousPage(){\n    if(this.pageNumber > 1){\n      this.pageNumber--;\n    }\n    this.loadTests();\n  }\n  \n  loadUserTests(){\n    console.log(\"a\");\n    this.userTestService.getTopUserTests(10)\n      .subscribe((data: object[]) =>{\n         this.userTests = data;\n      })\n  }\n\n  loadTestsByTitle(){\n    setTimeout(() => {\n      if(this.title == \"\"){\n        this.loadTests();\n      }\n      else{\n        this.testService.getTestsByTitle(this.title).subscribe((data: Test[]) => {\n          this.tests = data;\n        })\n      }\n    }, 0);\n  }\n}","<div class=\"container\">\n    <div class=\"col-lg-6 floating\">\n        <h1>Список тестов</h1>\n        <input type=\"text\" class=\"form-control\" placeholder=\"Название теста\" [(ngModel)]=\"title\" (ngModelChange)=\"loadTestsByTitle()\">\n        <table class=\"table mtable\">\n            <thead>\n                <tr>\n                    <td>Тест</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let t of tests\">\n                    <td><a routerLink=\"/test/{{t.testId}}\" class=\"nav-link tlink\">{{t?.title}}</a></td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"text-center\">\n            <button class=\"btn btn-sm btn-info mx-3\" (click)=\"previousPage()\"><</button>\n            <button class=\"btn btn-sm btn-info\" (click)=\"nextPage()\">></button>\n        </div>\n    </div>\n    <div class=\"col-lg-6 floating\">\n        <h1>Топ 10 результатов</h1>\n        <table class=\"table mtable\">\n            <thead>\n                <tr>\n                    <td>№</td>\n                    <td>Пользователь</td>\n                    <td>Тест</td>\n                    <td>Результат</td>\n                    <td>Время</td>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let u of userTests; let i = index\">\n                    <td>{{i+1}}</td>\n                    <td><a routerLink=\"/account/{{u.userId}}\">{{u?.Username}}</a></td>\n                    <td><a routerLink=\"/test/{{u.TestId}}\">{{u?.Test}}</a></td>\n                    <td>{{u?.Mark}}%</td>\n                    <td>{{u?.Time.substring(14)}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>","import { Question } from './question';\r\n\r\nexport class Answer {\r\n    AnswerId: number;\r\n    Content: string;\r\n    IsCorrect: boolean;\r\n    Mark: number;\r\n    QuestionId: number;\r\n    Question: Question;\r\n}","import { Test } from './test';\r\n\r\nexport class Question {\r\n    QuestionId: number;\r\n    Content: string;\r\n    TestId: number;\r\n    IsSingle: boolean;\r\n    Test: Test;\r\n    AnswerDescription: string;\r\n}","export class Test {\r\n    testId: number;\r\n    title: string;\r\n    maxScore: number;\r\n    description: string;\r\n    maxTime: Date;\r\n    questionsCount: number;\r\n    passedTimes: number;\r\n}","export class TestResult {\r\n\r\n    UserTestId: number;\r\n    UserId: string;\r\n    Username: string;\r\n    TestId: number;\r\n    TestTitle: string;\r\n    Mark: number;\r\n    Time: Date;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n\r\n    private accountUrl = environment.apiUrl + 'account/';\r\n\r\n    constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n    \r\n    passwordModel = this.fb.group({\r\n        Passwords: this.fb.group({\r\n            OldPassword: ['', Validators.required],\r\n            Password: ['', [Validators.required, Validators.minLength(6)]],\r\n            ConfirmPassword: ['', Validators.required]\r\n            }, { validator: this.comparePasswords })\r\n    });\r\n\r\n    usernameModel = this.fb.group({\r\n        NewUsername: ['', Validators.required]\r\n    });\r\n\r\n    newEmailModel = this.fb.group({\r\n        UserEmail: ['', [Validators.email, Validators.required]]\r\n    });\r\n\r\n    comparePasswords(fb: FormGroup) {\r\n        let confirmPswrdCtrl = fb.get('ConfirmPassword');\r\n        if (confirmPswrdCtrl.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {\r\n          if (fb.get('Password').value != confirmPswrdCtrl.value)\r\n            confirmPswrdCtrl.setErrors({ passwordMismatch: true });\r\n          else\r\n            confirmPswrdCtrl.setErrors(null);\r\n        }\r\n    }\r\n    \r\n    changePassword(userId: string){\r\n        let body = {\r\n            UserId: userId,\r\n            OldPassword: this.passwordModel.value.Passwords.OldPassword,\r\n            NewPassword: this.passwordModel.value.Passwords.Password\r\n        };\r\n        return this.http.put(this.accountUrl + 'changePassword', body);\r\n    }\r\n\r\n    changeUsername(oldUsername:string){\r\n        let body = {\r\n            OldUsername: oldUsername,\r\n            NewUsername: this.usernameModel.value.NewUsername\r\n        };\r\n        return this.http.put(this.accountUrl + 'changeUsername', body);\r\n    }\r\n\r\n    changeEmail(oldEmail: string){\r\n        let body = {\r\n            OldEmail: oldEmail,\r\n            NewEmail: this.newEmailModel.value.UserEmail\r\n        };\r\n        return this.http.post(this.accountUrl + 'changeEmail', body);\r\n    }\r\n\r\n    changeProfileImage(email: string, profileImageUrl: string){\r\n        let body = {\r\n            Email: email,\r\n            profileImageUrl: profileImageUrl\r\n        };\r\n        return this.http.put(this.accountUrl + 'changeProfileImage', body);\r\n    }\r\n\r\n    changeAboutMe(email: string, aboutMe: string){\r\n        let body = {\r\n            Email: email,\r\n            AboutMe: aboutMe\r\n        };\r\n        return this.http.put(this.accountUrl + 'changeAboutMe', body);\r\n    }\r\n\r\n    confirmNewEmail(body){\r\n        return this.http.post(this.accountUrl + 'confirmNewEmail', body);\r\n    }\r\n\r\n    getUserProfile() {\r\n        return this.http.get(this.accountUrl + 'profile');\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Answer } from '../models/answer';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class AnswerService {\r\n\r\n    private answerUrl = environment.apiUrl + 'answer/';\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n    \r\n    getAnswerById(id: number) {\r\n        return this.http.get(this.answerUrl + id);\r\n    }\r\n\r\n    createAnswerForNewQuestion(answer: Answer){\r\n        return this.http.post(this.answerUrl + 'newQuestion', answer);\r\n    }\r\n\r\n    createAnswerForOldQuestion(answer: Answer){\r\n        return this.http.post(this.answerUrl + 'oldQuestion', answer);\r\n    }\r\n\r\n    getAnswersByQuestionId(id){\r\n        return this.http.get(this.answerUrl + `question/${id}`);\r\n    }\r\n\r\n    deleteAnswer(id){\r\n        return this.http.delete(this.answerUrl + id);\r\n    }\r\n\r\n    editAnswer(answer: Answer){\r\n        return this.http.put(this.answerUrl, answer);\r\n    }\r\n}","import { Injectable } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  options;\n  constructor(private fb: FormBuilder, private http: HttpClient) {\n    this.options = {\n      headers: new HttpHeaders().append('Content-Type', 'application/json')\n    };\n  }\n  readonly authUrl = environment.apiUrl + 'auth/';\n\n  formModel = this.fb.group({\n    UserName: ['', Validators.required],\n    Email: ['', [Validators.email, Validators.required]],\n    Passwords: this.fb.group({\n      Password: ['', [Validators.required, Validators.minLength(6)]],\n      ConfirmPassword: ['', Validators.required]\n    }, { validator: this.comparePasswords })\n  });\n\n  passwordsModel = this.fb.group({\n    Passwords: this.fb.group({\n      Password: ['', [Validators.required, Validators.minLength(6)]],\n      ConfirmPassword: ['', Validators.required]\n    }, { validator: this.comparePasswords })\n  })\n\n  emailModel = this.fb.group({\n    Email: ['', [Validators.email, Validators.required]]\n  });\n\n  comparePasswords(fb: FormGroup) {\n    let confirmPswrdCtrl = fb.get('ConfirmPassword');\n    if (confirmPswrdCtrl.errors == null || 'passwordMismatch' in confirmPswrdCtrl.errors) {\n      if (fb.get('Password').value != confirmPswrdCtrl.value)\n        confirmPswrdCtrl.setErrors({ passwordMismatch: true });\n      else\n        confirmPswrdCtrl.setErrors(null);\n    }\n  }\n\n  register() {\n    var body = {\n      UserName: this.formModel.value.UserName,\n      Email: this.formModel.value.Email,\n      Password: this.formModel.value.Passwords.Password\n    };\n    return this.http.post(this.authUrl + 'register', body);\n  }\n\n  login(formData) {\n    return this.http.post(this.authUrl + 'login', formData);\n  }\n\n  roleMatch(allowedRoles): boolean {\n    var isMatch = false;\n    var payLoad = JSON.parse(window.atob(localStorage.getItem('token').split('.')[1]));\n    var userRole = payLoad.role;\n    allowedRoles.forEach(element => {\n      if (userRole == element) {\n        isMatch = true;\n        return false;\n      }\n    });\n    return isMatch;\n  }\n\n  confirmEmail(userId: string, token: string){\n    let body = JSON.stringify(token);\n    return this.http.post(this.authUrl + `confirmemail/${userId}`, body, this.options);\n  }\n\n  forgotPassword(){\n    let body = JSON.stringify(this.emailModel.value.Email);\n    return this.http.post(this.authUrl + 'forgotpassword', body, this.options);\n  }\n\n  resetPassword(userId: string, token: string){\n    var body = {\n      UserId: userId,\n      Password: this.passwordsModel.value.Passwords.Password,\n      Token: token\n    };\n    return this.http.post(this.authUrl + 'resetpassword', body);\n  }\n\n  googleLogin(){\n    // const httpOptions = {\n    //   headers: new HttpHeaders({\n    //     \"Access-Control-Allow-Origin\": \"*\"\n    //   })\n    // };\n    // return this.http.get(\"https://localhost:44340/api/auth/googlelogin\");\n    document.location.href = this.authUrl + \"googlelogin\";\n  }\n\n  facebookLogin(){\n    // const httpOptions = {\n    //   headers: new HttpHeaders({\n    //     \"Access-Control-Allow-Origin\": \"*\"\n    //   })\n    // };\n    // return this.http.get(\"https://localhost:44340/api/auth/facebooklogin\", httpOptions);\n    document.location.href = this.authUrl + \"facebooklogin\";\n  }\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Question } from '../models/question';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class QuestionService {//experimental decorations\r\n\r\n    private questionUrl = environment.apiUrl + 'question/';\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getQuestionById(id: number) {\r\n        return this.http.get(this.questionUrl + id);\r\n    }\r\n\r\n    createQuestionForNewTest(question: Question){\r\n        return this.http.post(this.questionUrl + \"newTest\", question);\r\n    }\r\n\r\n    createQuestionForOldTest(question: Question){\r\n        return this.http.post(this.questionUrl + \"oldTest\", question);\r\n    }\r\n\r\n    deleteQuestion(questionId: number){\r\n        return this.http.delete(this.questionUrl + questionId);\r\n    }\r\n\r\n    editQuestion(question: Question){\r\n        return this.http.put(this.questionUrl, question);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Test } from '../models/test';\r\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class TestService {\r\n\r\n    private testUrl = environment.apiUrl + 'test/';\r\n\r\n    constructor(private fb: FormBuilder, private http: HttpClient) {\r\n    }\r\n\r\n    testModel = this.fb.group({\r\n        Title: ['', Validators.required],\r\n        Description: ['', Validators.required],\r\n        QuestionsCount: ['', [this.questionCountRangeValidator, Validators.required]],\r\n        Time: ['', [Validators.pattern('[0-5][0-9][:][0-5][0-9]'), Validators.required]]\r\n    });\r\n    \r\n    questionCountRangeValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n        if (control.value !== undefined && (isNaN(control.value) || control.value < 0 || control.value > 50)) {\r\n            return { 'questionCountRange': true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getTests() {\r\n        return this.http.get(this.testUrl);\r\n    }\r\n\r\n    getTestById(id: number) {\r\n        return this.http.get(this.testUrl + id);\r\n    }\r\n    \r\n    getTestStart(id: number) {\r\n        return this.http.get(this.testUrl + `${id}/start`);\r\n    }\r\n\r\n    deleteTest(id: string){\r\n        return this.http.delete(this.testUrl + id);\r\n    }\r\n\r\n    putTest(test: Test){\r\n        return this.http.put(this.testUrl, test);\r\n    }\r\n\r\n    createTest(test: Test){\r\n        return this.http.post(this.testUrl, test);\r\n    }\r\n\r\n    getTestsForPagination(pageNumber){\r\n        return this.http.get(this.testUrl + `pagination?pageNumber=${pageNumber}&pageSize=4`);\r\n    }\r\n\r\n    getTestsByTitle(title){\r\n        return this.http.get(this.testUrl + `title/${title}`);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../models/user';\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n    private userUrl = environment.apiUrl + 'user/';\r\n\r\n    constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n    \r\n    emailModel = this.fb.group({\r\n        UserEmail: ['', [Validators.email]]\r\n    });\r\n      \r\n    getUsers() {\r\n        return this.http.get(this.userUrl);\r\n    }\r\n\r\n    getUser(id: string){\r\n        return this.http.get(this.userUrl + id);\r\n    }\r\n\r\n    deleteUser(id: string){\r\n        return this.http.delete(this.userUrl + id);\r\n    }\r\n\r\n    putUser(user: User){\r\n        return this.http.put(this.userUrl, user);\r\n    }\r\n\r\n    getUsersForPagination(pageNumber){\r\n        return this.http.get(this.userUrl + `pagination?pageNumber=${pageNumber}`);\r\n    }\r\n\r\n    changeUserRole(user: User){\r\n        return this.http.put(this.userUrl + 'changeRole', user);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TestResult } from '../models/testResult';\r\nimport { environment } from '../../environments/environment';\r\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class UserTestService {\r\n\r\n    private userTestUrl = environment.apiUrl + 'usertest/';\r\n\r\n    constructor(private fb: FormBuilder, private http: HttpClient) {\r\n    }\r\n\r\n    userTestModel = this.fb.group({\r\n        Username: ['', Validators.required],\r\n        TestTitle: ['', Validators.required],\r\n        Mark: ['', [this.markRangeValidator, Validators.required]],\r\n        Time: ['', [Validators.pattern('[0-5][0-9][:][0-5][0-9]'), Validators.required]]\r\n    });\r\n\r\n    markRangeValidator(control: AbstractControl): { [key: string]: boolean } | null {\r\n        if (control.value !== undefined && (isNaN(control.value) || control.value < 0 || control.value > 100)) {\r\n            return { 'markRange': true };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getAllUserTests(){\r\n        return this.http.get(this.userTestUrl);\r\n    }\r\n\r\n    getTopUserTests(count: number){\r\n        return this.http.get(this.userTestUrl + `top/${count}`);\r\n    }\r\n    \r\n    getUserTestsByUserId(id: string){\r\n        return this.http.get(this.userTestUrl + `user/${id}`);\r\n    }\r\n\r\n    getUserTestById(id: string){\r\n        return this.http.get(this.userTestUrl + id)\r\n    }\r\n\r\n    postTestResult(testResult: TestResult){\r\n        return this.http.post(this.userTestUrl, testResult);\r\n    }\r\n\r\n    putUserTest(testResult: TestResult){\r\n        return this.http.put(this.userTestUrl, testResult);\r\n    }\r\n\r\n    postTestResultByAdmin(testResult: TestResult){\r\n        return this.http.post(this.userTestUrl + \"admin\", testResult);\r\n    }\r\n    \r\n    deleteUserTest(id: string){\r\n        return this.http.delete(this.userTestUrl + id);\r\n    }\r\n\r\n    getUserTestsForPagination(pageNumber){\r\n        return this.http.get(this.userTestUrl + `pagination?pageNumber=${pageNumber}`);\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { TestService } from '../services/test.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Test } from '../models/test';\n\n@Component({\n  selector: 'app-test-info',\n  templateUrl: './test-info.component.html',\n  styles: []\n})\nexport class TestInfoComponent implements OnInit {\n\n  test;\n  loaded: boolean = false;\n\n  constructor(private testService: TestService, private router: Router, activeRoute: ActivatedRoute) {\n    this.test = new Test();\n    this.test.testId= Number.parseInt(activeRoute.snapshot.params[\"id\"]);\n  }\n\n  ngOnInit() {\n    this.getTest();\n  }\n\n  getTest() {\n    this.testService.getTestById(this.test.testId)\n        .subscribe((data: Test) => {\n          this.test = data;\n          //this.test.maxTime = new Date(data[\"maxTime\"]);\n          if(this.test != null){\n            this.loaded = true;\n          }\n        })\n  }\n}\n","<div *ngIf=\"loaded\">\n    <div class=\"container\">\n        <table class=\"table mtable\" style=\"margin: 30px;\">\n            <thead>\n                <tr>\n                    <td>Тест</td>\n                    <td>Описание</td>\n                    <td>Бал</td>\n                    <td>Количество вопросов</td>\n                    <td>Пройдено раз</td>\n                    <td>Время</td>\n                </tr>\n            </thead>\n            <tbody> \n                <tr>\n                    <td>{{test.title}}</td>\n                    <td>{{test.description}}</td> \n                    <td>{{test.maxScore}}</td>\n                    <td>{{test.questionsCount}}</td>\n                    <td>{{test.passedTimes}}</td>\n                    <td>{{test.maxTime.substring(14)}}</td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"text-center\">\n            <button class=\"btn btn-success\" routerLink=\"/teststart/{{test.testId}}\">Начать тестирование</button>\n        </div>\n    </div>\n</div>","import {CanDeactivate} from \"@angular/router\";\r\nimport {Observable} from \"rxjs\";\r\n \r\nexport interface ComponentCanDeactivate{\r\n    canDeactivate: () => boolean | Observable<boolean>;\r\n}\r\n \r\nexport class ExitTestStartGuard implements CanDeactivate<ComponentCanDeactivate>{\r\n \r\n    canDeactivate(component: ComponentCanDeactivate) : Observable<boolean> | boolean{\r\n         \r\n        return component.canDeactivate ? component.canDeactivate() : true;\r\n    }\r\n}","import { Component, OnInit, HostListener, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, CanDeactivate } from '@angular/router';\nimport { TestService } from '../services/test.service';\nimport { ComponentCanDeactivate } from './exit.test-start.guard';\nimport { Test } from '../models/test';\nimport { Question } from '../models/question';\nimport { Answer } from '../models/answer';\nimport { forkJoin, Observable } from 'rxjs';\nimport { TestResult } from '../models/testResult';\nimport { UserService } from '../services/user.service';\nimport { QuestionService } from '../services/question.service';\nimport { AnswerService } from '../services/answer.service';\nimport { UserTestService } from '../services/usertest.service';\nimport { AccountService } from '../services/account.service';\n\n@Component({\n  selector: 'app-test-start',\n  templateUrl: './test-start.component.html',\n  styleUrls: ['./test-start.component.css']\n})\nexport class TestStartComponent implements OnInit, ComponentCanDeactivate {\n\n  testInfo: Map<Question, Answer[]>;\n  loaded: boolean = false;\n  sum: number = 0;\n  timeLeft: number;\n  submitted: boolean = false;\n  localstorageTime: number;\n  localstorageTimeSet: boolean;\n  test: Test;\n  testId: number;\n  testResult: TestResult;\n  message: string;\n  interval;\n  userDetails;\n  result;\n  all;\n  observables;\n  minutes;\n  seconds;\n  answers;\n  answers1;\n\n\n  constructor(private testService: TestService, \n              private accountService: AccountService, \n              private questionService: QuestionService,\n              private answerService: AnswerService,\n              private userTestService: UserTestService,\n              private activeRoute: ActivatedRoute) {\n    this.testId = Number.parseInt(activeRoute.snapshot.params[\"id\"]);\n  }\n\n  ngOnInit(){\n      if (this.testId) {\n        this.getTest();\n        this.loadTestInfoGet();\n        this.fillLocalstorageTime();\n        this.accountService.getUserProfile().subscribe(\n          res => {\n            this.userDetails = res;\n          },\n          err => {\n            console.log(err);\n          },\n        );\n    }\n  }\n\n  loadTestInfoGet() {\n    let testInfoGet = new Map<string, Answer[]>();\n    this.testService.getTestStart(this.testId)\n        .subscribe((data: Map<string, Answer[]>) => {\n            testInfoGet = data; this.loaded = true;\n            this.fillQuestions(testInfoGet);\n        })\n  }\n\n  fillQuestions(testInfoGet: Map<string, Answer[]>) {\n    this.testInfo = new Map<Question, Answer[]>();\n    for (let t in testInfoGet) {\n        this.questionService.getQuestionById(Number(t))\n            .subscribe((data1: Question) => {\n                this.fillTestInfo(testInfoGet, data1);\n            })\n    }\n  }\n\n  fillTestInfo(testInfo: Map<string, Answer[]>, question: Question) {\n    this.testInfo.set(question, testInfo[question[\"questionId\"].toString()]);\n  }\n\n  onSubmit() {\n    if(!this.submitted){\n      this.endTest1();\n      if(this.observables.length > 0){\n        this.endTest2();\n      }\n      else{\n        alert(\"Вы не ответили ни на один вопрос, тест не может быть завершен!\");\n      }\n    }\n  }\n\n  getTest() {\n    this.testService.getTestById(this.testId)\n        .subscribe((data: Test) => {\n            this.test = new Test();\n            this.test.maxScore = data[\"maxScore\"];\n            this.test.description = data[\"description\"];\n            this.test.maxTime = new Date(data[\"maxTime\"]);\n            this.timer(data[\"maxTime\"]);\n        })\n  }\n\n  timer(data: Date) {\n    var d1 = new Date();\n    var d2 = new Date(d1);\n    var y = new Date(data);\n    d2.setMinutes(d1.getMinutes() + y.getMinutes());\n    d2.setSeconds(d2.getSeconds() + y.getSeconds() + 2);\n    var countDownDate = new Date(d2).getTime();\n\n    var startDate = new Date().getTime();\n    var passed = 0;\n    // Update the count down every 1 second\n    this.interval = setInterval(() => {\n        // Get today's date and time\n        var now = new Date().getTime();\n        var remaining = 0;\n        // Find the dremaining between now and the count down date\n        if(this.localstorageTimeSet == true){\n          passed = countDownDate - startDate - this.localstorageTime;\n          this.localstorageTimeSet = false;\n        }\n        remaining = countDownDate - now - passed;\n\n        // Time calculations for days, hours, minutes and seconds\n        var minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));\n        var seconds = Math.floor((remaining % (1000 * 60)) / 1000);\n\n        // Display the result in the element with id=\"time\"\n        document.getElementById(\"time\").innerHTML = minutes + \"m \" + seconds + \"s \";\n\n        if (remaining < 60000) {\n            var element = document.getElementById(\"countd\");\n            element.classList.remove(\"bg-gradient-4\");\n            element.classList.add(\"bg-gradient-3\");\n        }\n        // If the count down is finished, write some text\n        if (remaining < 0) {\n            this.endTest1();\n            this.endTest2();\n            document.getElementById(\"time\").innerHTML = \"Время вышло\";\n        }\n\n        this.timeLeft = remaining;\n    }, 1000);\n  }\n\n  @HostListener('window:beforeunload', ['$event']) onBeforeUnload(event) {\n    localStorage.setItem(`time_${this.testId}`, this.timeLeft.toString());  \n    clearInterval(this.interval);\n    if(this.submitted){\n      localStorage.removeItem(`time_${this.testId}`);\n    }\n    return false;\n  }\n\n  canDeactivate() : boolean | Observable<boolean>{\n    if(!this.submitted){\n      var result  = confirm(\"Вы не закончили прохождение теста, вы уверены что хотите покинуть страницу? В результат теста запишется ваш текущий результат.\");\n      if(result == true){\n        this.endTest1();\n        this.endTest2();          \n        localStorage.removeItem(`time_${this.testId}`);\n        clearInterval(this.interval);\n      }\n      return result;        \n    }\n    else{\n      localStorage.removeItem(`time_${this.testId}`);\n      clearInterval(this.interval);\n      return true;\n    }\n  }\n\n  fillLocalstorageTime(){\n    this.localstorageTime = Number(localStorage.getItem(`time_${this.testId}`));\n    if(this.localstorageTime != 0){\n      this.localstorageTimeSet = true;\n    }\n  }\n\n  endTest1(){\n    var min = this.test.maxTime.getMinutes() * 60000;\n    var sec = this.test.maxTime.getSeconds() * 1000;\n    var rizn = min + sec - this.timeLeft;\n\n    this.minutes = Math.floor((rizn % (1000 * 60 * 60)) / (1000 * 60));\n    this.seconds = Math.floor((rizn % (1000 * 60)) / 1000) + 1;\n     \n    this.answers1 = document.getElementsByName(\"answer\");\n    this.answers = this.answers1 as unknown as HTMLInputElement;\n\n    this.all = [];\n    this.observables = [];\n    for (let i = 0; i < this.answers1.length; i++) {\n        if (this.answers[i].checked) {\n            this.observables.push(this.answerService.getAnswerById(this.answers[i].id));\n        }\n        this.all.push(this.answerService.getAnswerById(this.answers[i].id));\n    }\n  }\n\n  endTest2(){\n    if(this.observables.length == 0){\n      this.sum = 0;\n      this.fillTestResult();\n      this.endTest3();\n    }\n    else{\n      forkJoin(this.observables).subscribe((data: Answer[]) => {\n        this.sum = (data || []).reduce((res, ans: Answer) => res + ans[\"mark\"], 0);\n        if(this.sum < 0){\n          this.sum = 0;\n        }\n        this.fillTestResult();\n        if(this.timeLeft > 0){\n          var result = confirm(\"Вы уверены что хотите завершить прохождение теста?\");\n          if(result){\n            this.endTest3();\n          }\n        }\n        else{\n          this.endTest3();\n        }\n      });\n    }\n  }\n\n  endTest3(){\n    this.submitted = true;\n    forkJoin(this.all).subscribe((data: Answer[]) => {\n      if(window.location.href.toString().includes(\"teststart\")){\n        for(let i = 0; i < data.length; i++){\n          if(data[i][\"isCorrect\"]){\n            document.getElementById(`check_${this.answers[i].id}`).classList.add(\"correct\");\n          }\n        }\n      }\n    });\n    document.getElementById('subButton').innerHTML = \"Результат\";\n    clearInterval(this.interval);\n    this.userTestService.postTestResult(this.testResult).subscribe(data => console.log(\"Finish\"));\n  }\n\n  fillTestResult(){\n    var timeResult = new Date();\n    timeResult.setMinutes(this.minutes);\n    timeResult.setSeconds(this.seconds);\n    timeResult.setMilliseconds(0);\n    this.testResult = new TestResult();\n    this.testResult.Mark = Number(((Number(this.sum)/this.test.maxScore) * 100).toFixed(2));\n    this.testResult.TestId = this.testId;\n    this.testResult.Time = timeResult;\n    this.testResult.UserId = this.userDetails.id;\n    if(this.testResult.Mark == 0){\n      this.message = \"Ваш результат невообразимо ужасен! Может Вы сознательно выбирали неправильные ответы?\";\n    }\n    else if(this.testResult.Mark > 0 && this.testResult.Mark < 40){\n      this.message = \"Грош цена вашему результату! Вы уверены что хотите быть программистом?\";\n    }\n    else if(this.testResult.Mark >= 40 && this.testResult.Mark < 60){\n      this.message = \"Это плохой результат. Вам нужно подучить теорию.\"\n    }\n    else if(this.testResult.Mark >= 60 && this.testResult.Mark < 70){\n      this.message = \"Это посредственный результат. Вам стоит больше практиковаться.\";\n    }\n    else if(this.testResult.Mark >= 70 && this.testResult.Mark < 80){\n      this.message = \"Это хороший результат, продолжайте обучение в том же духе!\";\n    }\n    else if(this.testResult.Mark >= 80 && this.testResult.Mark < 90){\n      this.message = \"Это отличный результат. Вы хорошо подготовились.\";\n    }\n    else if(this.testResult.Mark >= 90 && this.testResult.Mark < 100){\n      this.message = \"Это изумительный результат! Ваши знания программирования выше всяких похвал!\";\n    }\n    else{\n      this.message = \"Идеально! Вы Бог программирования!\";\n    }\n  }\n}","<div *ngIf=\"loaded\">\n    <div class=\"container\">\n        <h3 id=\"testtitle\">{{test.description}}</h3>\n        <div id=\"timer-wrapper\">\n            <div class=\"rounded bg-gradient-4 text-white shadow text-center\" id=\"countd\">\n                <p class=\"mb-0 font-weight-bold text-uppercase\">Limited Time Only!</p>\n                <div id=\"clock-a\" class=\"countdown pt-4\">\n                    <span id=\"time\"></span>\n                </div>\n            </div>\n        </div>\n        <br>\n        <div *ngFor=\"let item of testInfo | keyvalue; let i = index\">\n            <form name=\"form_{{i}}\">\n                <p><b>{{i+1}}. {{item.key.content}}</b></p>\n                <div *ngFor=\"let s of item.value\">\n                    <div *ngIf=\"item.key.isSingle; else isMultiple\">\n                        <p>\n                            <input type=\"radio\" name=\"answer\" id=\"{{s.answerId}}\" />\n                            <i id=\"check_{{s.answerId}}\"> {{s.content}}</i>\n                        </p>\n                    </div>\n                    <ng-template #isMultiple>\n                        <p>\n                            <input type=\"checkbox\" name=\"answer\" id=\"{{s.answerId}}\" />\n                            <i id=\"check_{{s.answerId}}\"> {{s.content}}</i>\n                        </p>\n                    </ng-template>\n                </div>\n                <div *ngIf=\"submitted\">\n                    <div *ngIf=\"item.key.answerDescription\">\n                        <p>Объяснение правильного ответа:</p>\n                        <p>{{item.key.answerDescription}}</p>\n                    </div>\n                </div>\n            </form>\n            <br/>\n        </div>\n        <button class=\"btn btn-success\" style=\"margin-bottom: 20px; margin-left: 10px;\" type=\"submit\" id=\"subButton\" (click)=\"onSubmit()\" data-toggle=\"modal\" data-target=\"#modalresults\">Завершить</button>\n    </div>\n</div>\n<div class=\"modal fade\" id=\"modalresults\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" *ngIf=\"submitted\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"exampleModalLabel\">Результат</h5>\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"results\">\n                <p>Вы набрали: {{testResult.Mark}}% баллов</p>\n                <p>{{message}}</p>\n                <p>Потраченное время на тест: {{testResult.Time.getMinutes()}} минут и {{testResult.Time.getSeconds()}} секунд</p>\n            </div> \n        </div>\n      </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { AccountService } from 'src/app/services/account.service';\n\n@Component({\n  selector: 'app-confirm-email',\n  templateUrl: './confirm-email.component.html',\n  styleUrls: ['./confirm-email.component.css']\n\n})\nexport class ConfirmEmailComponent implements OnInit {\n\n  userId: string;\n  token: string;\n  emailConfirmed: boolean; \n  newEmailConfirmed: boolean;\n  forNewEmail: boolean;\n  newEmail: string;\n\n  constructor(private toastr: ToastrService, private activatedRoute: ActivatedRoute, private accountService: AccountService, private authService: AuthService) {\n    this.activatedRoute.queryParams.subscribe(params => {\n          this.userId = params['userId'];\n          this.token = params['token'];\n          if(params['newEmail'] != null){\n            this.newEmail = params['newEmail'];\n            this.forNewEmail = true;\n          }\n      });\n  }\n\n  ngOnInit(): void {\n    if(this.forNewEmail){\n      this.confirmNewEmail();\n    }\n    else{\n      this.confirmEmail();\n    }\n  }\n\n  confirmEmail(){\n    this.authService.confirmEmail(this.userId, this.token).subscribe(data => { this.emailConfirmed = true; });\n  }\n\n  confirmNewEmail(){\n    var body = {\n      userId: this.userId,\n      newEmail: this.newEmail,\n      token: this.token\n    }\n    this.accountService.confirmNewEmail(body).subscribe(data => { this.newEmailConfirmed = true; });\n  }\n}\n","<div class=\"mx-4 my-2 py-4 conf\" style=\"text-align: center;\">\n    <div *ngIf=\"!forNewEmail\">\n        <div *ngIf=\"!emailConfirmed\">\n            <p>Email не был подтвержден, проверьте Вашу почту.</p>\n        </div>\n        <div *ngIf=\"emailConfirmed\">\n            <p>Email был успешно подтвержден, войдите в свой аккаунт, для доступа к функционалу сайта.</p>\n        </div>\n    </div>\n    <div *ngIf=\"forNewEmail\">\n        <div *ngIf=\"!newEmailConfirmed\">\n            <p>Email не был изменен, проверьте Вашу почту.</p>\n        </div>\n        <div *ngIf=\"newEmailConfirmed\">\n            <p>Email был успешно изменен, войдите в свой аккаунт, для доступа к функционалу сайта.</p>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-external-login',\n  templateUrl: './external-login.component.html',\n  styleUrls: ['./external-login.component.css']\n})\nexport class ExternalLoginComponent implements OnInit {\n\n  token: string;\n  isSuccess: boolean;\n\n  constructor(private toastr: ToastrService, private activatedRoute: ActivatedRoute, private router: Router) { \n    this.activatedRoute.queryParams.subscribe(params => {\n      if(params['token']){\n        this.token = params['token'];\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    if(this.token){\n      localStorage.setItem('token', this.token);\n      this.router.navigateByUrl('/home');\n    }\n    else{\n      this.toastr.error('Что-то пошло не так','Безуспешно.');\n      this.router.navigateByUrl('/user/login');\n    }\n  }\n}\n","<div class=\"mx-4 my-2 py-4 conf\" style=\"text-align: center;\">\n    <p>Что-то пошло не так.</p>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  constructor(public authService: AuthService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(){\n    this.authService.forgotPassword().subscribe(\n      data => {\n        this.toastr.success('Для восстановления, перейдите по ссылке, которая была отправлена на указаную почту.', 'Успешно.');\n      },\n      err => {\n        if (err.error == \"User was not found\"){\n          this.toastr.error('Пользователь с такой почтой не был найден.', 'Пароль не может быть восстановлен.');\n        }\n        else if(err.error == \"Email is not confirmed\"){\n          this.toastr.error('Почта не подтверждена.', 'Пароль не может быть восстановлен.');\n        }\n        else{\n          this.toastr.error('Что-то пошло не так.', 'Пароль не может быть восстановлен.');\n        }\n      });\n  }\n}\n","<form [formGroup]=\"authService.emailModel\" autocomplete=\"off\" (submit)=\"onSubmit()\">\n    <div class=\"form-group required\">\n      <label>Почта</label>\n      <input class=\"form-control\" formControlName=\"Email\">\n      <label class=\"text-danger\" *ngIf=\"authService.emailModel.get('Email').touched && authService.emailModel.get('Email').errors?.required\">\n        Это поле обязательно.\n      </label>\n      <label class=\"text-danger\" *ngIf=\"authService.emailModel.get('Email').touched && authService.emailModel.get('Email').errors?.email\">\n        Почта введена неверно.\n      </label>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-8 offset-md-2\">\n        <button type=\"submit\" class=\"btn btn-lg btn-block\" [disabled]=\"!authService.emailModel.valid\">Восстановить</button>\n      </div>\n    </div>\n</form>","import { ToastrService } from 'ngx-toastr';\nimport { AuthService } from '../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  formModel = {\n    UserName: '',\n    Password: ''\n  }\n\n  private authWindow: Window;\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) {\n  }\n\n  ngOnInit() {\n    if (localStorage.getItem('token') != null)\n      this.router.navigateByUrl('/home');\n  }\n\n  onSubmit(form: NgForm) {\n    this.authService.login(form.value).subscribe(\n      (res: any) => {\n        localStorage.setItem('token', res.jwtToken);\n        this.router.navigateByUrl('/home');\n      },\n      err => {\n        if (err.error == \"Username or password is incorrect\"){\n          this.toastr.error('Логин или пароль введены неверно.', 'Вход не выполнен.');\n        }\n        else if(err.error == \"Email is not confirmed\"){\n          this.toastr.error('Почта не подтверждена.', 'Вход не выполнен.');\n        }\n        else{\n          this.toastr.error('Что-то пошло не так.', 'Вход не выполнен.');\n        }\n      }\n    );\n  }\n\n  show_hide_password(){\n    var input = document.getElementById('password-input');\n    var eye = document.getElementById('passeye');\n    if (input.getAttribute('type') == 'password') {\n      eye.classList.add('view');\n      input.setAttribute('type', 'text');\n    } else {\n      eye.classList.remove('view');\n      input.setAttribute('type', 'password');\n    }\n    return false;\n  }\n\n  googleLogin(){\n    this.authService.googleLogin();\n  }\n\n  facebookLogin(){\n    this.authService.facebookLogin();\n  }\n}","<img src=\"/assets/img/single_user.png\" class=\"mx-auto d-block\">\n<form #form='ngForm' class=\"mb-4\" autocomplete=\"off\" (submit)=\"onSubmit(form)\">\n  <div class=\"form-group\">\n    <label>Имя пользователя</label>\n    <input class=\"form-control\" #UserName=\"ngModel\" name=\"UserName\" [(ngModel)]=\"formModel.UserName\" required>\n  </div>\n  <div class=\"form-group\">\n    <label>Пароль</label>\n    <div class=\"password\">\n      <input type=\"password\" id=\"password-input\" class=\"form-control\" #Password=\"ngModel\" name=\"Password\" [(ngModel)]=\"formModel.Password\" required>\n      <a href=\"#\" id=\"passeye\" class=\"password-control\" (click)=\"show_hide_password()\"></a>\n    </div>\n  </div>\n  <div class=\"form-row\">\n    <div class=\"form-group col-md-6 py-2 px-4\">\n      <a class=\"btn btn-outline-secondary btn-sm\" routerLink=\"/user/forgot-password\">Забыли пароль?</a>\n    </div>\n    <div class=\"form-group col-md-6\">\n      <button type=\"submit\" class=\"btn btn-lg btn-block\" [disabled]=\"form.invalid\">Войти</button>\n    </div>\n    <div class=\"form-group col-md-6 py-2 px-4\">\n      <a class=\"btn btn-outline-secondary btn-sm\" style=\"color: #6c757d\" (click)=\"googleLogin()\">Войти через Google</a>\n    </div>\n    <div class=\"form-group col-md-6 py-2 px-4\">\n      <a class=\"btn btn-outline-secondary btn-sm\" style=\"color: #6c757d\" (click)=\"facebookLogin()\">Войти через Facebook</a>\n    </div>\n  </div>\n</form>\n","import { AuthService } from '../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  constructor(public authService: AuthService, private toastr: ToastrService) { }\n  pas1: string = \"password\";\n  pas2: string = \"confirmPassword\";\n\n  ngOnInit() {\n    this.authService.formModel.reset(); \n  }\n\n  onSubmit() {\n    this.authService.register().subscribe(\n      (res: any) => {\n        if (res.succeeded) {\n          this.authService.formModel.reset();\n          this.toastr.success('Для окончания регистрации, перейдите по ссылке, которая была отправлена на указаную почту.', 'Регистрация прошла успешно.');\n        } else {\n          res.errors.forEach(element => {\n            switch (element.code) {\n              case 'DuplicateUserName':\n                this.toastr.error('Данный логин уже занят.','Регистрация не выполнена.');\n                break;\n              default:\n                this.toastr.error(element.description,'Регистрация не выполнена.');\n                break;\n            }\n          });\n        }\n      },\n      err => {\n        console.log(err);\n        this.toastr.error('Что-то пошло не так.', 'Регистрация не выполнена.');\n      }\n    );\n  }\n\n  show_hide_password(el){\n    if(el == \"password\"){\n      var input = document.getElementById('password-input');\n      var eye = document.getElementById('passeye');\n    }\n    else{\n      var input = document.getElementById('confirm-password-input');\n      var eye = document.getElementById('confirm-passeye');\n    }\n    if (input.getAttribute('type') == 'password') {\n      eye.classList.add('view');\n      input.setAttribute('type', 'text');\n    } else {\n      eye.classList.remove('view');\n      input.setAttribute('type', 'password');\n    }\n    return false;\n  }\n}","<form [formGroup]=\"authService.formModel\" autocomplete=\"off\" (submit)=\"onSubmit()\">\n    <div class=\"form-group required\">\n      <label>Имя пользователя</label>\n      <input class=\"form-control\" formControlName=\"UserName\">\n      <label class=\"text-danger\" *ngIf=\"authService.formModel.get('UserName').touched && authService.formModel.get('UserName').errors?.required\">\n        Это поле обязательно.\n      </label>\n    </div>\n    <div class=\"form-group required\">\n      <label>Почта</label>\n      <input class=\"form-control\" formControlName=\"Email\">\n      <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Email').touched && authService.formModel.get('Email').errors?.required\">\n        Это поле обязательно.\n      </label>\n      <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Email').touched && authService.formModel.get('Email').errors?.email\">\n        Почта введена неверно.\n      </label>\n    </div>\n    <div formGroupName=\"Passwords\">\n      <div class=\"form-group required\">\n        <label>Пароль</label>\n        <div class=\"password\">\n          <input type=\"password\" id=\"password-input\" class=\"form-control\" formControlName=\"Password\">\n          <a href=\"#\" id=\"passeye\" class=\"password-control\" (click)=\"show_hide_password(pas1)\"></a>\n        </div>\n        <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Passwords.Password').touched && authService.formModel.get('Passwords.Password').errors?.required\">\n          Это поле обязательно.\n        </label>\n        <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Passwords.Password').touched && authService.formModel.get('Passwords.Password').errors?.minlength\">\n          Пароль должен состоять минимум из 6 символов.\n        </label>\n      </div>\n      <div class=\"form-group required\">\n        <label>Подтвердите пароль</label>\n        <div class=\"password\">\n          <input type=\"password\" id=\"confirm-password-input\" class=\"form-control\" formControlName=\"ConfirmPassword\">\n          <a href=\"#\" id=\"confirm-passeye\" class=\"password-control\" (click)=\"show_hide_password(pas2)\"></a>\n        </div>\n        <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Passwords.ConfirmPassword').touched && authService.formModel.get('Passwords.ConfirmPassword').errors?.required\">\n          Это поле обязательно.\n        </label>\n        <label class=\"text-danger\" *ngIf=\"authService.formModel.get('Passwords.ConfirmPassword').touched && authService.formModel.get('Passwords.ConfirmPassword').errors?.passwordMismatch\">\n          Пароли не совпадают.\n        </label>\n      </div>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-8 offset-md-2\">\n        <button type=\"submit\" class=\"btn btn-lg btn-block\" [disabled]=\"!authService.formModel.valid\">Зарегистрироваться</button>\n      </div>\n    </div>\n</form>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  userId: string;\n  token: string;\n  emailConfirmed: boolean;\n  pas1: string = \"password\";\n  pas2: string = \"confirmPassword\";\n\n  constructor(private activatedRoute: ActivatedRoute, public authService: AuthService, private toastr: ToastrService, private router: Router) {\n    this.activatedRoute.queryParams.subscribe(params => {\n          this.userId = params['userId'];\n          this.token = params['token'];\n      });\n  }\n\n  ngOnInit(): void {\n    this.authService.passwordsModel.reset(); \n  }\n  \n  onSubmit(){\n    this.authService.resetPassword(this.userId, this.token).subscribe(\n      (res: any) => { \n      if (res.succeeded) {\n        this.router.navigateByUrl('/user/login');\n        this.toastr.success('Пароль был изменен.', 'Успешно.');\n      } \n      else {\n        res.errors.forEach(element => {\n          this.toastr.error(element.description,'Пароль не был изменен.');\n        });\n      }\n     },\n     err => {\n       this.toastr.error('Что-то пошло не так.', 'Пароль не был изменен.');\n     });\n  }\n\n  show_hide_password(el){\n    if(el == \"password\"){\n      var input = document.getElementById('password-input');\n      var eye = document.getElementById('passeye');\n    }\n    else{\n      var input = document.getElementById('confirm-password-input');\n      var eye = document.getElementById('confirm-passeye');\n    }\n    if (input.getAttribute('type') == 'password') {\n      eye.classList.add('view');\n      input.setAttribute('type', 'text');\n    } else {\n      eye.classList.remove('view');\n      input.setAttribute('type', 'password');\n    }\n    return false;\n  }\n}\n","<form [formGroup]=\"authService.passwordsModel\" autocomplete=\"off\" (submit)=\"onSubmit()\">\n    <div formGroupName=\"Passwords\">\n      <div class=\"form-group required\">\n        <label>Новый пароль</label>\n        <div class=\"password\">\n          <input type=\"password\" id=\"password-input\" class=\"form-control\" formControlName=\"Password\">\n          <a href=\"#\" id=\"passeye\" class=\"password-control\" (click)=\"show_hide_password(pas1)\"></a>\n        </div>\n        <label class=\"text-danger\" *ngIf=\"authService.passwordsModel.get('Passwords.Password').touched && authService.passwordsModel.get('Passwords.Password').errors?.required\">\n          Это поле обязательно.\n        </label>\n        <label class=\"text-danger\" *ngIf=\"authService.passwordsModel.get('Passwords.Password').touched && authService.passwordsModel.get('Passwords.Password').errors?.minlength\">\n          Пароль должен состоять минимум из 6 символов.\n        </label>\n      </div> \n      <div class=\"form-group required\">\n        <label>Подтвердите пароль</label>\n        <div class=\"password\">\n          <input type=\"password\" id=\"confirm-password-input\" class=\"form-control\" formControlName=\"ConfirmPassword\">\n          <a href=\"#\" id=\"confirm-passeye\" class=\"password-control\" (click)=\"show_hide_password(pas2)\"></a>\n        </div>\n        <label class=\"text-danger\" *ngIf=\"authService.passwordsModel.get('Passwords.ConfirmPassword').touched && authService.passwordsModel.get('Passwords.ConfirmPassword').errors?.required\">\n          Это поле обязательно.\n        </label>\n        <label class=\"text-danger\" *ngIf=\"authService.passwordsModel.get('Passwords.ConfirmPassword').touched && authService.passwordsModel.get('Passwords.ConfirmPassword').errors?.passwordMismatch\">\n          Пароли не совпадают.\n        </label>\n      </div>\n    </div>\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-8 offset-md-2\">\n        <button type=\"submit\" class=\"btn btn-lg btn-block\" [disabled]=\"!authService.passwordsModel.valid\">Сохранить</button>\n      </div>\n    </div>\n  </form>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"wrapper\">\n    <div class=\"wrapped-div\">\n      <div class=\"tab-header\"> \n        <h2 class=\"w-100 col-4 text-center\" routerLink='/user/login' routerLinkActive='active'>Войти</h2>\n        <h2 class=\"w-100 col-4 text-center\" routerLink='/user/registration' routerLinkActive='active'>Регистрация</h2>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-10 offset-md-1\">\n          <router-outlet></router-outlet>\n        </div>\n      </div>\n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://ec2-3-21-231-5.us-east-2.compute.amazonaws.com:8080/api/'\n};\n// http://localhost:8080/api/ docker\n// https://localhost:44340/api/ local\n// http://ec2-3-21-231-5.us-east-2.compute.amazonaws.com:8080/api/ aws\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}