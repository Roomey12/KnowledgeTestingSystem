{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/components/app.component.ts","webpack:///src/app/views/app.component.html","webpack:///src/app/components/registration.component.ts","webpack:///src/app/views/registration.component.html","webpack:///src/app/components/test-list.component.ts","webpack:///src/app/views/test-list.component.html","webpack:///src/app/components/test-start.component.ts","webpack:///src/app/views/test-start.component.html","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","redirectTo","AppModule","forRoot","imports","declarations","bootstrap","AppComponent","selector","templateUrl","RegistrationComponent","loading","submitted","console","log","providers","TestListComponent","dataService","loadProducts","getTests","subscribe","data","tests","TestStartComponent","activeRoute","loaded","sum","Number","parseInt","snapshot","params","loadTestInfoGet","testInfoGet","Map","getTestStart","fillQuestions","testInfo","t","getQuestionById","data1","fillTestInfo","question","set","toString","answers1","document","getElementsByName","answers","observables","i","length","checked","push","getAnswerById","value","reduce","res","ans","alert","DataService","http","testsUrl","questionUrl","answerUrl","get","UserService","usersUrl","user","post","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppComponent } from './components/app.component';\r\nimport { TestStartComponent } from './components/test-start.component';\r\nimport { TestListComponent } from './components/test-list.component';\r\nimport { RegistrationComponent } from './components/registration.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    { path: '', component: TestListComponent },\r\n    { path: 'teststart/:id', component: TestStartComponent },\r\n    { path: 'registration', component: RegistrationComponent },\r\n    { path: '**', redirectTo: '/' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, [CommonModule], FormsModule, HttpClientModule, RouterModule.forRoot(appRoutes)],\r\n    declarations: [AppComponent, TestListComponent, TestStartComponent, RegistrationComponent],\r\n    bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: '../views/app.component.html'\r\n})\r\n\r\nexport class AppComponent { }","<div class=\"container body-content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from '../models/user';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n    templateUrl: '../views/registration.component.html',\r\n    providers: [UserService]\r\n})\r\n\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n    registerForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    //error: string;\r\n\r\n    constructor(\r\n        //private formBuilder: FormBuilder//,\r\n        //private router: Router,\r\n        //private userService: UserService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        console.log(\"1\");\r\n        //this.registerForm = this.formBuilder.group({\r\n        //    email: ['', Validators.required]\r\n        //    //username: ['', Validators.required],\r\n        //    //password: ['', [Validators.required, Validators.minLength(6)]]\r\n        //});\r\n    }\r\n\r\n    //get f() { return this.registerForm.controls; }\r\n\r\n    onSubmit() {\r\n        console.log(\"ok\");\r\n        //this.submitted = true;\r\n\r\n        //// stop here if form is invalid\r\n        //if (this.registerForm.invalid) {\r\n        //    return;\r\n        //}\r\n\r\n        //this.loading = true;\r\n        //this.userService.register(this.registerForm.value)\r\n        //    .pipe(first())\r\n        //    .subscribe(\r\n        //        data => {\r\n        //            this.router.navigate(['/login'], { queryParams: { registered: true } });\r\n        //        },\r\n        //        error => {\r\n        //            this.error = error;\r\n        //            this.loading = false;\r\n        //        });\r\n    }\r\n}","<!--<div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>-->\r\n<h2>Register</h2>\r\n<!--<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n        </div>\r\n    </div>-->\r\n    <!--<div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Register\r\n        </button>\r\n        <a routerLink=\"/login\" class=\"btn btn-link\">Cancel</a>\r\n    </div>-->\r\n<!--</form>-->","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../services/data.service';\r\nimport { Test } from '../models/test';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-list.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestListComponent implements OnInit {\r\n\r\n    tests: Test[];             \r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadProducts();    // загрузка данных при старте компонента  \r\n    }\r\n    // получаем данные через сервис\r\n    loadProducts() {\r\n        this.dataService.getTests()\r\n            .subscribe((data: Test[]) => {\r\n                this.tests = data;\r\n            });\r\n    }\r\n}","<h1>Список тестов</h1>\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Тест</td>\r\n            <td>Описание</td>\r\n            <td>Бал</td>\r\n            <td>Время</td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let t of tests\">\r\n            <td><a [routerLink]=\"['teststart', t.testId]\" class=\"nav-link\">{{t?.title}}</a></td>\r\n            <td>{{t?.description}}</td>\r\n            <td>{{t?.maxScore}}</td>\r\n            <td>{{t?.maxTime.substring(14)}}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<br />\r\n<p><a routerLink=\"/registration\" class=\"nav-link\">Зарегистрироваться</a></p>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService } from '../services/data.service';\r\nimport { Question } from '../models/question';\r\nimport { Answer } from '../models/answer';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-start.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestStartComponent implements OnInit {\r\n\r\n    testInfo: Map<Question, Answer[]>;\r\n    id: number;\r\n    loaded: boolean = false;\r\n    sum: number = 0;\r\n    \r\n    constructor(private dataService: DataService, activeRoute: ActivatedRoute) {\r\n        this.id = Number.parseInt(activeRoute.snapshot.params[\"id\"]);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id) {\r\n            this.loadTestInfoGet();\r\n        }\r\n    }\r\n\r\n    loadTestInfoGet() {\r\n        let testInfoGet = new Map<string, Answer[]>();\r\n        this.dataService.getTestStart(this.id)\r\n            .subscribe((data: Map<string, Answer[]>) => {\r\n                testInfoGet = data; this.loaded = true;\r\n                this.fillQuestions(testInfoGet);\r\n            })\r\n    }\r\n\r\n    fillQuestions(testInfoGet: Map<string, Answer[]>) {\r\n        this.testInfo = new Map<Question, Answer[]>();\r\n        for (let t in testInfoGet) {\r\n            this.dataService.getQuestionById(Number(t))\r\n                .subscribe((data1: Question) => {\r\n                    this.fillTestInfo(testInfoGet, data1);\r\n                })\r\n        }\r\n    }\r\n\r\n    fillTestInfo(testInfo: Map<string, Answer[]>, question: Question) {\r\n        this.testInfo.set(question, testInfo[question[\"questionId\"].toString()]);\r\n        //console.log(this.testInfo);\r\n    }\r\n\r\n    onSubmit() {\r\n        let answers1 = document.getElementsByName(\"answer\");\r\n        let answers = answers1 as unknown as HTMLInputElement;\r\n\r\n        const observables = [];\r\n        for (let i = 0; i < answers1.length; i++) {\r\n            if (answers[i].checked) {\r\n                observables.push(this.dataService.getAnswerById(answers[i].value));\r\n            }\r\n        }\r\n\r\n        forkJoin(observables).subscribe((data: Answer[]) => {\r\n            this.sum = (data || []).reduce((res, ans: Answer) => res + ans[\"mark\"], 0);\r\n            alert(`Ваш результат: ${this.sum}`);\r\n        });\r\n    }\r\n}","<div *ngIf=\"loaded\">\r\n    <br />\r\n    <div *ngFor=\"let item of testInfo | keyvalue; let i = index\">\r\n        <form name=\"form_{{i}}\">\r\n            <p><b>{{i+1}}. {{item.key.content}}</b></p>\r\n            <div *ngFor=\"let s of item.value\">\r\n                <div *ngIf=\"item.key.isSingle; else isMultiple\">\r\n                    <p><input type=\"radio\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </div>\r\n                <ng-template #isMultiple>\r\n                    <p><input type=\"checkbox\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </ng-template>\r\n            </div>\r\n        </form>\r\n        <br />\r\n    </div>\r\n    <input class=\"btn btn-primary\" type=\"submit\" form=\"\" (click)=\"onSubmit()\" />\r\n    <br /><br />\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DataService {//experimental decorations\r\n\r\n    private testsUrl = \"api/tests\";\r\n    private questionUrl = \"api/questions\"\r\n    private answerUrl = \"api/answers\"\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getTests() {\r\n        return this.http.get(this.testsUrl);\r\n    }\r\n\r\n    getTestStart(id: number) {\r\n        return this.http.get(this.testsUrl + `/${id}/start`);\r\n    }\r\n\r\n    getQuestionById(id: number) {\r\n        return this.http.get(this.questionUrl + `/${id}`);\r\n    }\r\n\r\n    getAnswerById(id: number) {\r\n        return this.http.get(this.answerUrl + `/${id}`);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable()\r\nexport class UserService {//experimental decorations\r\n\r\n    private usersUrl = \"api/users\";\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getUsers() {\r\n        return this.http.get(this.usersUrl);\r\n    }\r\n\r\n    register(user: User) {\r\n        return this.http.post(this.usersUrl, user);\r\n    }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"]}