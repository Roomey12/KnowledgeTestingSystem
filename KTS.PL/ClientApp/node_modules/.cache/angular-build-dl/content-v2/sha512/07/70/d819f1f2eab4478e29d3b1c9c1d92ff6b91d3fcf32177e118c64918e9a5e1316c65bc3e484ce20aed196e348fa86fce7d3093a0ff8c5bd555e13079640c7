{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.module.ts","./src/app/components/app.component.ts","./src/app/views/app.component.html","./src/app/components/registration.component.ts","./src/app/views/registration.component.html","./src/app/components/test-list.component.ts","./src/app/views/test-list.component.html","./src/app/components/test-start.component.ts","./src/app/views/test-start.component.html","./src/app/services/data.service.ts","./src/app/services/user.service.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACiB;AACb;AACW;AACD;AACR;AAEW;AACa;AACF;AACO;;;AAG5E,MAAM,SAAS,GAAW;IACtB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,iFAAiB,EAAE;IAC1C,EAAE,IAAI,EAAE,eAAe,EAAE,SAAS,EAAE,mFAAkB,EAAE;IACxD,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,wFAAqB,EAAE;IAC1D,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,EAAE;CAClC,CAAC;AAQK,MAAM,SAAS;;wFAAT,SAAS,cAHN,sEAAY;4IAGf,SAAS,kBALT,CAAC,uEAAa,EAAE,CAAC,4DAAY,CAAC,EAAE,0DAAW,EAAE,qEAAgB,EAAE,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;mIAK/F,SAAS,mBAJH,sEAAY,EAAE,iFAAiB,EAAE,mFAAkB,EAAE,wFAAqB,aAD/E,uEAAa,EAAG,4DAAY,EAAG,0DAAW,EAAE,qEAAgB,EAAE;6FAK/D,SAAS;cANrB,sDAAQ;eAAC;gBACN,OAAO,EAAE,CAAC,uEAAa,EAAE,CAAC,4DAAY,CAAC,EAAE,0DAAW,EAAE,qEAAgB,EAAE,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBACxG,YAAY,EAAE,CAAC,sEAAY,EAAE,iFAAiB,EAAE,mFAAkB,EAAE,wFAAqB,CAAC;gBAC1F,SAAS,EAAE,CAAC,sEAAY,CAAC;aAC5B;;;;;;;;;;;;;;ACxBD;AAAA;AAAA;AAAA;AAA0C;;;AAOnC,MAAM,YAAY;;wEAAZ,YAAY;4FAAZ,YAAY;QCPzB,yEACI;QAAA,2EAA+B;QACnC,4DAAM;;6FDKO,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,KAAK;gBACf,WAAW,EAAE,6BAA6B;aAC7C;;;;;;;;;;;;;;AELD;AAAA;AAAA;AAAA;AAAkD;AACK;;AAWhD,MAAM,qBAAqB;IAK9B,gBAAgB;IAEhB;QAJA,YAAO,GAAG,KAAK,CAAC;QAChB,cAAS,GAAG,KAAK,CAAC;IAOd,CAAC;IAEL,QAAQ;QACJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjB,8CAA8C;QAC9C,sCAAsC;QACtC,4CAA4C;QAC5C,sEAAsE;QACtE,KAAK;IACT,CAAC;IAED,gDAAgD;IAEhD,QAAQ;QACJ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,wBAAwB;QAExB,iCAAiC;QACjC,kCAAkC;QAClC,aAAa;QACb,GAAG;QAEH,sBAAsB;QACtB,oDAAoD;QACpD,oBAAoB;QACpB,iBAAiB;QACjB,mBAAmB;QACnB,sFAAsF;QACtF,YAAY;QACZ,oBAAoB;QACpB,iCAAiC;QACjC,mCAAmC;QACnC,aAAa;IACjB,CAAC;;0FA5CQ,qBAAqB;qGAArB,qBAAqB,6GAHnB,CAAC,kEAAW,CAAC;QCR5B,qEAAI;QAAA,mEAAQ;QAAA,4DAAK;;6FDWJ,qBAAqB;cALjC,uDAAS;eAAC;gBACP,WAAW,EAAE,sCAAsC;gBACnD,SAAS,EAAE,CAAC,kEAAW,CAAC;aAC3B;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACK;;;;;;;ICU/C,qEACI;IAAA,qEAAI;IAAA,uEAA2D;IAAA,uDAAY;IAAA,4DAAI;IAAA,4DAAK;IACpF,qEAAI;IAAA,uDAAkB;IAAA,4DAAK;IAC3B,qEAAI;IAAA,uDAAe;IAAA,4DAAK;IACxB,qEAAI;IAAA,uDAA4B;IAAA,4DAAK;IACzC,4DAAK;;;IAJM,0DAAsC;IAAtC,2JAAsC;IAAkB,0DAAY;IAAZ,mGAAY;IACvE,0DAAkB;IAAlB,yGAAkB;IAClB,0DAAe;IAAf,sGAAe;IACf,0DAA4B;IAA5B,mHAA4B;;ADNrC,MAAM,iBAAiB;IAI1B,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAEjD,QAAQ;QACJ,IAAI,CAAC,YAAY,EAAE,CAAC,CAAI,0CAA0C;IACtE,CAAC;IACD,+BAA+B;IAC/B,YAAY;QACR,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;aACtB,SAAS,CAAC,CAAC,IAAY,EAAE,EAAE;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACtB,CAAC,CAAC,CAAC;IACX,CAAC;;kFAfQ,iBAAiB;iGAAjB,iBAAiB,6GAHf,CAAC,kEAAW,CAAC;QCN5B,qEAAI;QAAA,oIAAa;QAAA,4DAAK;QACtB,2EACI;QAAA,wEACI;QAAA,qEACI;QAAA,qEAAI;QAAA,mFAAI;QAAA,4DAAK;QACb,qEAAI;QAAA,2GAAQ;QAAA,4DAAK;QACjB,qEAAI;QAAA,8EAAG;QAAA,4DAAK;QACZ,sEAAI;QAAA,0FAAK;QAAA,4DAAK;QAClB,4DAAK;QACT,4DAAQ;QACR,yEACI;QAAA,8GACI;QAKR,4DAAQ;QACZ,4DAAQ;QACR,iEACA;QAAA,qEAAG;QAAA,wEAA+C;QAAA,wKAAkB;QAAA,4DAAI;QAAA,4DAAI;;QAThE,2DAAuB;QAAvB,8EAAuB;;6FDFtB,iBAAiB;cAL7B,uDAAS;eAAC;gBACP,WAAW,EAAE,mCAAmC;gBAChD,SAAS,EAAE,CAAC,kEAAW,CAAC;aAC3B;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEK;AAGvB;;;;;;;ICChB,sEACI;IAAA,oEAAG;IAAA,sEAA0D;IAAA,uDAAa;IAAA,4DAAI;IAClF,4DAAM;;;IADmC,0DAAsB;IAAtB,2FAAsB;IAAE,0DAAa;IAAb,6EAAa;;;IAG1E,oEAAG;IAAA,sEAA6D;IAAA,uDAAa;IAAA,4DAAI;;;IAAzC,0DAAsB;IAAtB,2FAAsB;IAAE,0DAAa;IAAb,6EAAa;;;IALrF,sEACI;IAAA,gIACI;IAEJ,4NACI;IAER,4DAAM;;;;IANG,0DAA0C;IAA1C,sFAA0C;;;IAJ3D,sEACI;IAAA,0EACI;IAAA,oEAAG;IAAA,oEAAG;IAAA,uDAA6B;IAAA,4DAAI;IAAA,4DAAI;IAC3C,0HACI;IAOR,4DAAO;IACP,gEACJ;IAAA,4DAAM;;;;IAZI,0DAAiB;IAAjB,+FAAiB;IACb,0DAA6B;IAA7B,6GAA6B;IAC9B,0DAA4B;IAA5B,kFAA4B;;;;IAL7C,sEACI;IAAA,gEACA;IAAA,oHACI;;IAaJ,2EACA;IADqD,uTAAoB;IAAzE,4DACA;IAAA,gEAAM;IAAA,gEACV;IAAA,4DAAM;;;IAhBG,0DAAuD;IAAvD,qJAAuD;;ADUzD,MAAM,kBAAkB;IAO3B,YAAoB,WAAwB,EAAE,WAA2B;QAArD,gBAAW,GAAX,WAAW,CAAa;QAH5C,WAAM,GAAY,KAAK,CAAC;QACxB,QAAG,GAAW,CAAC,CAAC;QAGZ,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,QAAQ;QACJ,IAAI,IAAI,CAAC,EAAE,EAAE;YACT,IAAI,CAAC,eAAe,EAAE,CAAC;SAC1B;IACL,CAAC;IAED,eAAe;QACX,IAAI,WAAW,GAAG,IAAI,GAAG,EAAoB,CAAC;QAC9C,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;aACjC,SAAS,CAAC,CAAC,IAA2B,EAAE,EAAE;YACvC,WAAW,GAAG,IAAI,CAAC;YAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACvC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC,CAAC;IACV,CAAC;IAED,aAAa,CAAC,WAAkC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAsB,CAAC;QAC9C,KAAK,IAAI,CAAC,IAAI,WAAW,EAAE;YACvB,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBACtC,SAAS,CAAC,CAAC,KAAe,EAAE,EAAE;gBAC3B,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC;SACT;IACL,CAAC;IAED,YAAY,CAAC,QAA+B,EAAE,QAAkB;QAC5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACzE,6BAA6B;IACjC,CAAC;IAED,QAAQ;QACJ,IAAI,QAAQ,GAAG,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,OAAO,GAAG,QAAuC,CAAC;QAEtD,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE;gBACpB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;aACtE;SACJ;QAED,qDAAQ,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,IAAc,EAAE,EAAE;YAC/C,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAW,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3E,KAAK,CAAC,kBAAkB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC;;oFAxDQ,kBAAkB;kGAAlB,kBAAkB,6GAHhB,CAAC,kEAAW,CAAC;QCT5B,8GACI;;QADC,4EAAc;;6FDYN,kBAAkB;cAL9B,uDAAS;eAAC;gBACP,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,kEAAW,CAAC;aAC3B;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAA2C;;;AAIpC,MAAM,WAAW;IAMpB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJ5B,aAAQ,GAAG,WAAW,CAAC;QACvB,gBAAW,GAAG,eAAe;QAC7B,cAAS,GAAG,aAAa;IAGjC,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,YAAY,CAAC,EAAU;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,EAAE,QAAQ,CAAC,CAAC;IACzD,CAAC;IAED,eAAe,CAAC,EAAU;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,aAAa,CAAC,EAAU;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;IACpD,CAAC;;sEAvBQ,WAAW;8FAAX,WAAW,WAAX,WAAW;6FAAX,WAAW;cADvB,wDAAU;;;;;;;;;;;;;;ACHX;AAAA;AAAA;AAAA;AAA2C;;;AAKpC,MAAM,WAAW;IAIpB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,aAAQ,GAAG,WAAW,CAAC;IAG/B,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ,CAAC,IAAU;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;;sEAbQ,WAAW;8FAAX,WAAW,WAAX,WAAW;6FAAX,WAAW;cADvB,wDAAU;;;;;;;;;;;;;;ACJX;AAAA;AAAA;AAAA;AAA2E;AAC5B;AACF;AAE7C,oEAAc,EAAE,CAAC;AACjB,MAAM,QAAQ,GAAG,gGAAsB,EAAE,CAAC;AAC1C,QAAQ,CAAC,eAAe,CAAC,yDAAS,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppComponent } from './components/app.component';\r\nimport { TestStartComponent } from './components/test-start.component';\r\nimport { TestListComponent } from './components/test-list.component';\r\nimport { RegistrationComponent } from './components/registration.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    { path: '', component: TestListComponent },\r\n    { path: 'teststart/:id', component: TestStartComponent },\r\n    { path: 'registration', component: RegistrationComponent },\r\n    { path: '**', redirectTo: '/' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, [CommonModule], FormsModule, HttpClientModule, RouterModule.forRoot(appRoutes)],\r\n    declarations: [AppComponent, TestListComponent, TestStartComponent, RegistrationComponent],\r\n    bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: '../views/app.component.html'\r\n})\r\n\r\nexport class AppComponent { }","<div class=\"container body-content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from '../models/user';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n    templateUrl: '../views/registration.component.html',\r\n    providers: [UserService]\r\n})\r\n\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n    registerForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    //error: string;\r\n\r\n    constructor(\r\n        //private formBuilder: FormBuilder//,\r\n        //private router: Router,\r\n        //private userService: UserService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        console.log(\"1\");\r\n        //this.registerForm = this.formBuilder.group({\r\n        //    email: ['', Validators.required]\r\n        //    //username: ['', Validators.required],\r\n        //    //password: ['', [Validators.required, Validators.minLength(6)]]\r\n        //});\r\n    }\r\n\r\n    //get f() { return this.registerForm.controls; }\r\n\r\n    onSubmit() {\r\n        console.log(\"ok\");\r\n        //this.submitted = true;\r\n\r\n        //// stop here if form is invalid\r\n        //if (this.registerForm.invalid) {\r\n        //    return;\r\n        //}\r\n\r\n        //this.loading = true;\r\n        //this.userService.register(this.registerForm.value)\r\n        //    .pipe(first())\r\n        //    .subscribe(\r\n        //        data => {\r\n        //            this.router.navigate(['/login'], { queryParams: { registered: true } });\r\n        //        },\r\n        //        error => {\r\n        //            this.error = error;\r\n        //            this.loading = false;\r\n        //        });\r\n    }\r\n}","<!--<div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>-->\r\n<h2>Register</h2>\r\n<!--<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n        </div>\r\n    </div>-->\r\n    <!--<div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Register\r\n        </button>\r\n        <a routerLink=\"/login\" class=\"btn btn-link\">Cancel</a>\r\n    </div>-->\r\n<!--</form>-->","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../services/data.service';\r\nimport { Test } from '../models/test';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-list.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestListComponent implements OnInit {\r\n\r\n    tests: Test[];             \r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadProducts();    // загрузка данных при старте компонента  \r\n    }\r\n    // получаем данные через сервис\r\n    loadProducts() {\r\n        this.dataService.getTests()\r\n            .subscribe((data: Test[]) => {\r\n                this.tests = data;\r\n            });\r\n    }\r\n}","<h1>Список тестов</h1>\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Тест</td>\r\n            <td>Описание</td>\r\n            <td>Бал</td>\r\n            <td>Время</td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let t of tests\">\r\n            <td><a [routerLink]=\"['teststart', t.testId]\" class=\"nav-link\">{{t?.title}}</a></td>\r\n            <td>{{t?.description}}</td>\r\n            <td>{{t?.maxScore}}</td>\r\n            <td>{{t?.maxTime.substring(14)}}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<br />\r\n<p><a routerLink=\"/registration\" class=\"nav-link\">Зарегистрироваться</a></p>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService } from '../services/data.service';\r\nimport { Question } from '../models/question';\r\nimport { Answer } from '../models/answer';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-start.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestStartComponent implements OnInit {\r\n\r\n    testInfo: Map<Question, Answer[]>;\r\n    id: number;\r\n    loaded: boolean = false;\r\n    sum: number = 0;\r\n    \r\n    constructor(private dataService: DataService, activeRoute: ActivatedRoute) {\r\n        this.id = Number.parseInt(activeRoute.snapshot.params[\"id\"]);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id) {\r\n            this.loadTestInfoGet();\r\n        }\r\n    }\r\n\r\n    loadTestInfoGet() {\r\n        let testInfoGet = new Map<string, Answer[]>();\r\n        this.dataService.getTestStart(this.id)\r\n            .subscribe((data: Map<string, Answer[]>) => {\r\n                testInfoGet = data; this.loaded = true;\r\n                this.fillQuestions(testInfoGet);\r\n            })\r\n    }\r\n\r\n    fillQuestions(testInfoGet: Map<string, Answer[]>) {\r\n        this.testInfo = new Map<Question, Answer[]>();\r\n        for (let t in testInfoGet) {\r\n            this.dataService.getQuestionById(Number(t))\r\n                .subscribe((data1: Question) => {\r\n                    this.fillTestInfo(testInfoGet, data1);\r\n                })\r\n        }\r\n    }\r\n\r\n    fillTestInfo(testInfo: Map<string, Answer[]>, question: Question) {\r\n        this.testInfo.set(question, testInfo[question[\"questionId\"].toString()]);\r\n        //console.log(this.testInfo);\r\n    }\r\n\r\n    onSubmit() {\r\n        let answers1 = document.getElementsByName(\"answer\");\r\n        let answers = answers1 as unknown as HTMLInputElement;\r\n\r\n        const observables = [];\r\n        for (let i = 0; i < answers1.length; i++) {\r\n            if (answers[i].checked) {\r\n                observables.push(this.dataService.getAnswerById(answers[i].value));\r\n            }\r\n        }\r\n\r\n        forkJoin(observables).subscribe((data: Answer[]) => {\r\n            this.sum = (data || []).reduce((res, ans: Answer) => res + ans[\"mark\"], 0);\r\n            alert(`Ваш результат: ${this.sum}`);\r\n        });\r\n    }\r\n}","<div *ngIf=\"loaded\">\r\n    <br />\r\n    <div *ngFor=\"let item of testInfo | keyvalue; let i = index\">\r\n        <form name=\"form_{{i}}\">\r\n            <p><b>{{i+1}}. {{item.key.content}}</b></p>\r\n            <div *ngFor=\"let s of item.value\">\r\n                <div *ngIf=\"item.key.isSingle; else isMultiple\">\r\n                    <p><input type=\"radio\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </div>\r\n                <ng-template #isMultiple>\r\n                    <p><input type=\"checkbox\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </ng-template>\r\n            </div>\r\n        </form>\r\n        <br />\r\n    </div>\r\n    <input class=\"btn btn-primary\" type=\"submit\" form=\"\" (click)=\"onSubmit()\" />\r\n    <br /><br />\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DataService {//experimental decorations\r\n\r\n    private testsUrl = \"api/tests\";\r\n    private questionUrl = \"api/questions\"\r\n    private answerUrl = \"api/answers\"\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getTests() {\r\n        return this.http.get(this.testsUrl);\r\n    }\r\n\r\n    getTestStart(id: number) {\r\n        return this.http.get(this.testsUrl + `/${id}/start`);\r\n    }\r\n\r\n    getQuestionById(id: number) {\r\n        return this.http.get(this.questionUrl + `/${id}`);\r\n    }\r\n\r\n    getAnswerById(id: number) {\r\n        return this.http.get(this.answerUrl + `/${id}`);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable()\r\nexport class UserService {//experimental decorations\r\n\r\n    private usersUrl = \"api/users\";\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getUsers() {\r\n        return this.http.get(this.usersUrl);\r\n    }\r\n\r\n    register(user: User) {\r\n        return this.http.post(this.usersUrl, user);\r\n    }\r\n}","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"],"sourceRoot":"webpack:///"}