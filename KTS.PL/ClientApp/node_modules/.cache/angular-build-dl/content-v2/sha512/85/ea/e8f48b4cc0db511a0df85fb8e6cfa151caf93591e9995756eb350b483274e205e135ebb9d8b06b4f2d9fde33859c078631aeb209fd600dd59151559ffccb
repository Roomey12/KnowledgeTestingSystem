{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/components/app.component.ts","webpack:///src/app/views/app.component.html","webpack:///src/app/components/login.component.ts","webpack:///src/app/views/login.component.html","webpack:///src/app/components/login2.component.ts","webpack:///src/app/views/login2.component.html","webpack:///src/app/components/registration.component.ts","webpack:///src/app/views/registration.component.html","webpack:///src/app/components/test-list.component.ts","webpack:///src/app/views/test-list.component.html","webpack:///src/app/components/test-start.component.ts","webpack:///src/app/views/test-start.component.html","webpack:///src/app/models/user.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","redirectTo","AppModule","forRoot","imports","declarations","bootstrap","AppComponent","selector","templateUrl","LoginComponent","formBuilder","route","router","authenticationService","loading","submitted","loginForm","group","username","required","password","returnUrl","snapshot","queryParams","success","error","invalid","login","f","value","pipe","subscribe","data","console","log","navigate","controls","onSubmit","Login2Component","currentUserValue","RegistrationComponent","userService","registerForm","email","minLength","user","register","registered","providers","TestListComponent","dataService","loadProducts","getTests","tests","TestStartComponent","activeRoute","loaded","sum","Number","parseInt","params","loadTestInfoGet","testInfoGet","Map","getTestStart","fillQuestions","testInfo","t","getQuestionById","data1","fillTestInfo","question","set","toString","answers1","document","getElementsByName","answers","observables","i","length","checked","push","getAnswerById","reduce","res","ans","alert","User","AuthService","http","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","post","apiUrl","setItem","stringify","next","removeItem","providedIn","AuthenticationService","url","Username","Password","DataService","testsUrl","questionUrl","answerUrl","get","UserService","usersUrl","environment","production","platform","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppComponent } from './components/app.component';\r\nimport { TestStartComponent } from './components/test-start.component';\r\nimport { TestListComponent } from './components/test-list.component';\r\nimport { RegistrationComponent } from './components/registration.component';\r\nimport { LoginComponent } from './components/login.component';\r\nimport { Login2Component } from './components/login2.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    { path: '', component: TestListComponent },\r\n    { path: 'teststart/:id', component: TestStartComponent },\r\n    { path: 'registration', component: RegistrationComponent },\r\n    { path: 'login', component: LoginComponent },\r\n    { path: 'login2', component: Login2Component },\r\n    { path: '**', redirectTo: '/' }\r\n];\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, [CommonModule], FormsModule, HttpClientModule, RouterModule.forRoot(appRoutes), ReactiveFormsModule ],\r\n    declarations: [AppComponent, TestListComponent, TestStartComponent, RegistrationComponent, LoginComponent, Login2Component],\r\n    bootstrap: [AppComponent]\r\n})\r\n\r\nexport class AppModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: '../views/app.component.html'\r\n})\r\n\r\nexport class AppComponent { }","<div class=\"container body-content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service'\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({ templateUrl: '../views/login.component.html' })\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    error: string;\r\n    success: string\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authenticationService: AuthenticationService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n\r\n        // show success message on registration\r\n        if (this.route.snapshot.queryParams['registered']) {\r\n            this.success = 'Registration successful';\r\n        }\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.loginForm.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.error = null;\r\n        this.success = null;\r\n\r\n        // stop here if form is invalid\r\n        if (this.loginForm.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    console.log(\"sas\");\r\n                    this.router.navigate(['/']);//[this.returnUrl]);\r\n                },\r\n                error => {\r\n                    this.error = error;\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}","<div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\r\n<div *ngIf=\"success\" class=\"alert alert-success\">{{success}}</div>\r\n<h2>Login</h2>\r\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">username is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Login\r\n        </button>\r\n        <a routerLink=\"/register\" class=\"btn btn-link\">Register</a>\r\n    </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({ templateUrl: '../views/login2.component.html' })\r\n\r\nexport class Login2Component implements OnInit {\r\n    loginForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    returnUrl: string;\r\n    error = '';\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private authenticationService: AuthService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.authenticationService.currentUserValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.loginForm = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n\r\n        // get return url from route parameters or default to '/'\r\n        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.loginForm.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // stop here if form is invalid\r\n        if (this.loginForm.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.authenticationService.login(this.f.username.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    this.router.navigate([this.returnUrl]);\r\n                },\r\n                error => {\r\n                    this.error = error;\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}","<div class=\"col-md-6 offset-md-3 mt-5\">\r\n    <div class=\"alert alert-info\">\r\n        Username: test<br />\r\n        Password: test\r\n    </div>\r\n    <div class=\"card\">\r\n        <h4 class=\"card-header\">Angular 9 JWT Login Example</h4>\r\n        <div class=\"card-body\">\r\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"username\">Username</label>\r\n                    <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                    <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"password\">Password</label>\r\n                    <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                    </div>\r\n                </div>\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Login\r\n                </button>\r\n                <div *ngIf=\"error\" class=\"alert alert-danger mt-3 mb-0\">{{error}}</div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from '../models/user';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Component({\r\n    templateUrl: '../views/registration.component.html',\r\n    providers: [UserService]\r\n})\r\n\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n    user: User;\r\n    registerForm: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    error: string;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private userService: UserService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        console.log(\"1\");\r\n        this.registerForm = this.formBuilder.group({\r\n            email: ['', Validators.required],\r\n            username: ['', Validators.required],\r\n            password: ['', [Validators.required, Validators.minLength(6)]]\r\n        });\r\n    }\r\n\r\n    get f() { return this.registerForm.controls; }\r\n\r\n    onSubmit() {\r\n        console.log(\"ok\");\r\n        this.submitted = true;\r\n\r\n        this.user = this.registerForm.value;\r\n        console.log(this.user);\r\n\r\n        // stop here if form is invalid\r\n        if (this.registerForm.invalid) {\r\n            return;\r\n        }\r\n        this.loading = true;\r\n        this.userService.register(this.user)\r\n            .pipe(first())\r\n            .subscribe(\r\n                data => {\r\n                    this.router.navigate(['/'], { queryParams: { registered: true } });\r\n                },\r\n                error => {\r\n                    this.error = error;\r\n                    this.loading = false;\r\n                });\r\n    }\r\n}","<div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\r\n<h2>Register</h2>\r\n<form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"form-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\r\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.email.errors.required\">Email is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"username\">Username</label>\r\n        <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n            Register\r\n        </button>\r\n        <!--<a routerLink=\"/login\" class=\"btn btn-link\">Cancel</a>-->\r\n    </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from '../services/data.service';\r\nimport { Test } from '../models/test';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-list.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestListComponent implements OnInit {\r\n\r\n    tests: Test[];             \r\n\r\n    constructor(private dataService: DataService) { }\r\n\r\n    ngOnInit() {\r\n        this.loadProducts();    // загрузка данных при старте компонента  \r\n        \r\n    }\r\n    // получаем данные через сервис\r\n    loadProducts() {\r\n        this.dataService.getTests()\r\n            .subscribe((data: Test[]) => {\r\n                this.tests = data;\r\n            });\r\n\r\n\r\n    }\r\n}","<h1>Список тестов</h1>\r\n<table class=\"table table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <td>Тест</td>\r\n            <td>Описание</td>\r\n            <td>Бал</td>\r\n            <td>Время</td>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let t of tests\">\r\n            <td><a [routerLink]=\"['teststart', t.testId]\" class=\"nav-link\">{{t?.title}}</a></td>\r\n            <td>{{t?.description}}</td>\r\n            <td>{{t?.maxScore}}</td>\r\n            <td>{{t?.maxTime.substring(14)}}</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<br />\r\n<p><a routerLink=\"/login2\" class=\"nav-link\">Войти</a></p>\r\n<br />\r\n<p><a routerLink=\"/registration\" class=\"nav-link\">Зарегистрироваться</a></p>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DataService } from '../services/data.service';\r\nimport { Question } from '../models/question';\r\nimport { Answer } from '../models/answer';\r\nimport { forkJoin } from 'rxjs';\r\n\r\n@Component({\r\n    templateUrl: '../views/test-start.component.html',\r\n    providers: [DataService]\r\n})\r\n\r\nexport class TestStartComponent implements OnInit {\r\n\r\n    testInfo: Map<Question, Answer[]>;\r\n    id: number;\r\n    loaded: boolean = false;\r\n    sum: number = 0;\r\n    \r\n    constructor(private dataService: DataService, activeRoute: ActivatedRoute) {\r\n        this.id = Number.parseInt(activeRoute.snapshot.params[\"id\"]);\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id) {\r\n            this.loadTestInfoGet();\r\n        }\r\n    }\r\n\r\n    loadTestInfoGet() {\r\n        let testInfoGet = new Map<string, Answer[]>();\r\n        this.dataService.getTestStart(this.id)\r\n            .subscribe((data: Map<string, Answer[]>) => {\r\n                testInfoGet = data; this.loaded = true;\r\n                this.fillQuestions(testInfoGet);\r\n            })\r\n    }\r\n\r\n    fillQuestions(testInfoGet: Map<string, Answer[]>) {\r\n        this.testInfo = new Map<Question, Answer[]>();\r\n        for (let t in testInfoGet) {\r\n            this.dataService.getQuestionById(Number(t))\r\n                .subscribe((data1: Question) => {\r\n                    this.fillTestInfo(testInfoGet, data1);\r\n                })\r\n        }\r\n    }\r\n\r\n    fillTestInfo(testInfo: Map<string, Answer[]>, question: Question) {\r\n        this.testInfo.set(question, testInfo[question[\"questionId\"].toString()]);\r\n        //console.log(this.testInfo);\r\n    }\r\n\r\n    onSubmit() {\r\n        let answers1 = document.getElementsByName(\"answer\");\r\n        let answers = answers1 as unknown as HTMLInputElement;\r\n\r\n        const observables = [];\r\n        for (let i = 0; i < answers1.length; i++) {\r\n            if (answers[i].checked) {\r\n                observables.push(this.dataService.getAnswerById(answers[i].value));\r\n            }\r\n        }\r\n\r\n        forkJoin(observables).subscribe((data: Answer[]) => {\r\n            this.sum = (data || []).reduce((res, ans: Answer) => res + ans[\"mark\"], 0);\r\n            alert(`Ваш результат: ${this.sum}`);\r\n        });\r\n    }\r\n}","<div *ngIf=\"loaded\">\r\n    <br />\r\n    <div *ngFor=\"let item of testInfo | keyvalue; let i = index\">\r\n        <form name=\"form_{{i}}\">\r\n            <p><b>{{i+1}}. {{item.key.content}}</b></p>\r\n            <div *ngFor=\"let s of item.value\">\r\n                <div *ngIf=\"item.key.isSingle; else isMultiple\">\r\n                    <p><input type=\"radio\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </div>\r\n                <ng-template #isMultiple>\r\n                    <p><input type=\"checkbox\" name=\"answer\" value=\"{{s.answerId}}\"/>{{s.content}}</p>\r\n                </ng-template>\r\n            </div>\r\n        </form>\r\n        <br />\r\n    </div>\r\n    <input class=\"btn btn-primary\" type=\"submit\" form=\"\" (click)=\"onSubmit()\" />\r\n    <br /><br />\r\n</div>\r\n","export class User {\r\n    Email: string;\r\n    Username: string;\r\n    Password: string;\r\n    Token?: string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\nexport class AuthService {\r\n\r\n    private currentUserSubject: BehaviorSubject<User>;\r\n    public currentUser: Observable<User>;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n\r\n    public get currentUserValue(): User {\r\n        return this.currentUserSubject.value;\r\n    }\r\n\r\n    login(username: string, password: string) {\r\n        return this.http.post<any>(`${environment.apiUrl}/users/authenticate`, { username, password })\r\n            .pipe(map(user => {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('currentUser', JSON.stringify(user));\r\n                this.currentUserSubject.next(user);\r\n                return user;\r\n            }));\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n        this.currentUserSubject.next(null);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthenticationService {//experimental decorations\r\n\r\n    private url = \"api/authentication\";\r\n    user: User;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n\r\n    login(username, password) {\r\n        this.user = new User();\r\n        this.user.Username = username;\r\n        this.user.Password = password;\r\n        console.log(this.user);\r\n        return this.http.post(this.url, this.user);\r\n    }\r\n\r\n    //logout() {\r\n    //    return this.http.post(this.url, 1);\r\n    //}\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DataService {//experimental decorations\r\n\r\n    private testsUrl = \"api/tests\";\r\n    private questionUrl = \"api/questions\"\r\n    private answerUrl = \"api/answers\"\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getTests() {\r\n        return this.http.get(this.testsUrl);\r\n    }\r\n\r\n    getTestStart(id: number) {\r\n        return this.http.get(this.testsUrl + `/${id}/start`);\r\n    }\r\n\r\n    getQuestionById(id: number) {\r\n        return this.http.get(this.questionUrl + `/${id}`);\r\n    }\r\n\r\n    getAnswerById(id: number) {\r\n        return this.http.get(this.answerUrl + `/${id}`);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable()\r\nexport class UserService {//experimental decorations\r\n\r\n    private usersUrl = \"api/users\";;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getUsers() {\r\n        return this.http.get(this.usersUrl);\r\n    }\r\n\r\n    register(user: User) {\r\n        return this.http.post(this.usersUrl, user);\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get<User[]>(`${environment.apiUrl}/users`);\r\n    }\r\n}","export const environment = {\r\n    production: false,\r\n    apiUrl: 'http://localhost:44368'\r\n};","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nenableProdMode();\r\nconst platform = platformBrowserDynamic();\r\nplatform.bootstrapModule(AppModule);"]}